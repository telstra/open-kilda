plugins {
    id "io.freefair.aspectj.post-compile-weaving"
    id "com.github.johnrengelman.shadow"
}

compileJava.ajc.options.compilerArgs += "-showWeaveInfo"
compileJava.ajc.options.compilerArgs += "-verbose"
compileJava.options.compilerArgs += "-Amapstruct.unmappedTargetPolicy=ERROR"

description = "Flow Monitoring Storm Topology"
dependencies {
    implementation(project(":flowmonitoring-messaging"))
    implementation(project(":flowhs-messaging"))
    implementation(project(":stats-messaging"))
    implementation(project(":base-storm-topology"))
    implementation(project(":server42-messaging"))
    implementation(project(":network-messaging"))
    implementation(project(":floodlight-api"))
    implementation(project(":blue-green"))
    implementation("org.yaml:snakeyaml:2.2")

    // runtimeClasspath because 'releaseArtifacts' shouldn't go for tests.
    runtimeClasspath(project(path: ":base-storm-topology", configuration: "releaseArtifacts"))
    runtimeOnly(project(":kilda-persistence-orientdb"))
    runtimeOnly(project(":kilda-persistence-hibernate"))
    aspect(project(":kilda-persistence-api"))

    compileOnly("org.apache.storm:storm-core"){
        exclude(group: "org.yaml", module: "snakeyaml")
    }

    testImplementation(project(path: ":kilda-persistence-tinkerpop", configuration: "testArtifacts"))
    testImplementation(project(":kilda-utils:stubs"))
    testImplementation(project(path: ":kilda-persistence-api", configuration: "testArtifacts"))
    testImplementation(project(path: ":base-storm-topology", configuration: "testArtifacts"))
    testImplementation("org.apache.storm:storm-core")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.mockito:mockito-junit-jupiter")
    testImplementation("org.hamcrest:hamcrest-library")

    implementation("org.mapstruct:mapstruct")
    implementation("org.mapstruct:mapstruct-processor")
    annotationProcessor("org.mapstruct:mapstruct-processor")
    testAnnotationProcessor("org.mapstruct:mapstruct-processor")

    compileOnly("org.projectlombok:lombok")
    testCompileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok-mapstruct-binding")
    testAnnotationProcessor("org.projectlombok:lombok-mapstruct-binding")
}

jar {
    manifest {
        attributes 'Main-Class': 'org.openkilda.wfm.topology.flowmonitoring.FlowMonitoringTopology'
    }

    archiveClassifier = "original"
}

shadowJar {
    archiveClassifier = ""
    mergeServiceFiles()
    zip64 true
}

artifacts {
    archives shadowJar
}

test {
    useJUnitPlatform()
}
