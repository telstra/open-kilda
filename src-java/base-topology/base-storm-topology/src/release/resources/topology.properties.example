environment.naming.prefix = 

parallelism.new = 2
parallelism = 1
workers = 1

#######
# Storm-specific topology configuration.
#
# Configure timeout milliseconds used for disruptor queue wait strategy. Can be used to tradeoff latency vs. CPU usage.
# disruptor.wait.timeout = 1000
#
# The maximum age in milliseconds a batch can be before being sent to the next thread.
# disruptor.batch.timeout = 10
#
# The amount of milliseconds a spout should sleep when emits no tuples.
# spout.wait.sleep.time = 100

kafka.hosts = kafka.pendev:9092
kafka.partitions.default = 1
kafka.replication.default = 3
kafka.topic.ctrl = kilda.ctrl
kafka.topic.flow = kilda.flow
kafka.topic.flow.status = kilda.flow.status
kafka.topic.ping = kilda.ping
kafka.topic.northbound = kilda.northbound
kafka.topic.opentsdb = kilda.otsdb
kafka.topic.simulator = kilda.simulator
kafka.topic.speaker = kilda.speaker
kafka.topic.speaker.disco = kilda.speaker.disco
kafka.topic.speaker.flow = kilda.speaker.flow
kafka.topic.speaker.flow.ping = kilda.speaker.flow.ping
kafka.topic.stats = kilda.stats
kafka.topic.topo.disco = kilda.topo.disco
kafka.topic.topo.eng = kilda.topo.eng
kafka.topic.topo.nbworker = kilda.topo.nb
kafka.topic.topo.reroute = kilda.topo.reroute

reroute.throttling.delay.min = 3
reroute.throttling.delay.max = 15

isl.unstable.timeout.sec = 7200

port.up.down.throttling.delay.seconds.min = 1
port.up.down.throttling.delay.seconds.warm.up = 5
port.up.down.throttling.delay.seconds.cool.down = 10
port.antiflap.stats.dumping.interval.seconds = 60

bfd.port.offset = 200

opentsdb.hosts = http://opentsdb.pendev:4242
opentsdb.timeout = 30
opentsdb.num.spouts = 1
opentsdb.num.opentsdbfilterbolt = 1
opentsdb.num.opentsdbbolt = 1
opentsdb.workers.opentsdbolt = 1
opentsdb.num.datapointparserbolt = 1
opentsdb.workers.datapointparserbolt = 1
opentsdb.batch.size = 50
opentsdb.flush.interval = 1
opentsdb.workers = 1
opentsdb.client.chunked-requests.enabled = true
opentsdb.metric.prefix = kilda.

neo4j.uri = bolt://neo4j.pendev:7687
neo4j.user = neo4j
neo4j.password = temppass

logger.level = INFO

#######
# Discovery
# - discovery.generic.interval = how many bolt ticks(1 tick per second) between ISL discovery / health checks, starts from 0
# - discovery.exhausted.interval = how many seconds between sending a discovery packet in case
#   if the endpoint (switch + port) does not belong to ISL
# - discovery.auxiliary.interval = how many seconds between ISL discovery when another mechanism is used
#   to determine ISL state (e.g. BFD)
# - discovery.timeout = at which point do we send an ISL Failure (if it is an ISL)
#       - NB: the number is in "ticks", not "attempts" .. attempts = timeout/interval
# - discovery.limit = at what point do we stop sending? -1 means never ..
# - discovery.speaker-failure-timeout - after this amount of seconds without a
#   message from speaker it will be marked as unavailable
# - discovery.keep.removed.isl - how long should we store/remember in minutes isl endpoints.
#   it is mainly used for defining whether isl is moved or not
discovery.generic.interval = 3
discovery.exhausted.interval = 60
discovery.auxiliary.interval = 30
discovery.round.trip.status.interval = 1
discovery.packet.ttl = 5
discovery.timeout = 15
discovery.db.write.repeats.time.frame = 30

# all following ping intervals are in seconds
#flow.ping.scale-factor = 2
#flow.ping.interval = 10
#flow.ping.timeout = 2
#flow.ping.fail.delay = 45
#flow.ping.fail.reset = 1800

# multi-FL
floodlight.alive.timeout = 10
floodlight.alive.interval = 2
message.blacklist.timeout = 180
floodlight.regions = 1

local = no
local.execution.time = 3000

pce.network.strategy = SYMMETRIC_COST
pce.diversity.isl.cost = 10000
pce.diversity.switch.cost = 1000
pce.isl.cost.when.unstable = 10000
pce.isl.cost.when.under.maintenance = 10000

burst.coefficient = 1.05
min.burst.size.in.kbits = 1024

statsrouter.timeout = 100
statsrouter.request.interval = 60

# round trip latency
latency.update.interval = 300
latency.update.time.range = 600
latency.discovery.interval.multiplier = 3

# flow(H&S) topology
flow.hub.transaction.retries = 3
flow.path.allocation.retries = 10
flow.path.allocation.retry.delay = 50
flow.create.hub.timeout.seconds = 30
flow.create.speaker.timeout.seconds = 10
flow.create.speaker.command.retries = 3
flow.create.hub.retries = 3
flow.update.hub.timeout.seconds = 30
flow.update.speaker.timeout.seconds = 10
flow.update.speaker.command.retries = 3
flow.reroute.hub.timeout.seconds = 30
flow.reroute.speaker.timeout.seconds = 10
flow.reroute.speaker.command.retries = 3
flow.delete.hub.timeout.seconds = 30
flow.delete.speaker.timeout.seconds = 10
flow.delete.speaker.command.retries = 3
