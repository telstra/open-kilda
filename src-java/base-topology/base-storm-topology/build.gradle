buildscript {
    repositories {
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        // Not compatible with Gradle 7. See https://github.com/shevek/jarjar/issues/22
        //classpath 'org.anarres.jarjar:jarjar-gradle:1.0.1'
        // So build the plugin from the source at the version which supports Gradle 7.
        classpath 'com.github.shevek.jarjar:jarjar-gradle:9a7eca72f9'
    }
}

plugins {
    id 'java-library'
    id 'io.freefair.aspectj.post-compile-weaving'
}

apply plugin: 'org.anarres.jarjar'

compileJava.ajc.options.compilerArgs += '-showWeaveInfo'
compileJava.ajc.options.compilerArgs += '-verbose'

description = 'Base Storm Topology'
dependencies {
    api project(':blue-green')
    api project(':base-messaging')
    api project(':base-messaging-mappers')
    api project(':kilda-configuration')
    api project(':kilda-persistence-api')
    aspect project(':kilda-persistence-api')
    implementation project(':kilda-reporting')
    testImplementation project(path: ':kilda-persistence-api', configuration: 'testArtifacts')
    testImplementation project(path: ':kilda-persistence-tinkerpop', configuration: 'testArtifacts')
    testImplementation project(':kilda-utils:stubs')

    api 'org.apache.storm:storm-kafka-client'

    compileOnly 'org.apache.storm:storm-core'
    testImplementation('org.apache.storm:storm-core') {
        exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
    }

    implementation jarjar.repackage('storm-flux-core-1.2.1-repackaged') {
        from 'org.apache.storm:flux-core:1.2.1'

        // Remove bundled libraries as they conflict with other dependencies.
        classDelete 'org.apache.commons.**'
        classDelete 'org.apache.http.**'
        classDelete 'org.apache.storm.flux.wrappers.**'
        classDelete 'org.apache.thrift.**'
        classDelete 'org.yaml.**'
    }

    api('org.squirrelframework:squirrel-foundation') {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j', module: 'log4j'
    }

    api 'com.google.guava:guava'
    api 'org.apache.commons:commons-lang3'
    api 'org.apache.commons:commons-collections4'
    api 'com.fasterxml.jackson.core:jackson-annotations'
    api 'com.fasterxml.jackson.core:jackson-databind'
    api 'com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider'
    api 'args4j:args4j'
    implementation 'com.google.code.gson:gson'
    api 'com.fasterxml.uuid:java-uuid-generator'
    api 'net.jodah:failsafe'
    api 'org.hibernate.validator:hibernate-validator'
    runtimeOnly 'org.glassfish:javax.el'

    api 'org.aspectj:aspectjrt'
    implementation 'org.mapstruct:mapstruct'
    implementation 'org.mapstruct:mapstruct-processor'
    annotationProcessor 'org.mapstruct:mapstruct-processor'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor'

    api('org.apache.kafka:kafka-clients') {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j', module: 'log4j'
    }
    api('org.apache.kafka:kafka_2.11') {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j', module: 'log4j'
    }

    api 'io.micrometer:micrometer-core:1.8.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.vintage:junit-vintage-engine'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.hamcrest:hamcrest-library'
    testImplementation 'org.apache.curator:curator-test'
    testRuntimeOnly 'org.hibernate.validator:hibernate-validator'
    testRuntimeOnly 'org.glassfish:javax.el'
    testRuntimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl'

    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding'
    testAnnotationProcessor 'org.projectlombok:lombok-mapstruct-binding'
}

sourceSets {
    releaseResources {
        resources {
            srcDir 'src/release/resources'
        }
    }
}

configurations {
    testArtifacts
    releaseArtifacts
}

task testJar(type: Jar) {
    dependsOn compileTestJava
    classifier 'test'
    from sourceSets.test.output
}

task releaseJar(type: Jar) {
    dependsOn processResources
    classifier 'release'
    from sourceSets.releaseResources.output
}

artifacts {
    testArtifacts testJar
    releaseArtifacts releaseJar
}

buildAndCopyArtifacts {
    from("${project.buildDir}/resources/releaseResources/topology.properties") { into "${project.name}/resources" }
}
