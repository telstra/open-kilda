import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.ajoberstar.grgit.Grgit

import java.text.DateFormat
import java.util.jar.JarFile

plugins {
    id 'org.sonarqube' version '3.1.1'
    id 'org.ajoberstar.grgit' version '4.0.2' apply false
    id 'com.github.johnrengelman.shadow' version '6.1.0' apply false
    id 'io.freefair.aspectj.post-compile-weaving' version '5.3.0' apply false
}

allprojects {
    group = 'org.openkilda'
    version = '1.0-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
        maven { url "https://clojars.org/repo" }
    }

    dependencies {
        implementation(platform('com.fasterxml.jackson:jackson-bom:2.10.0'))

        constraints {
            compileOnly 'org.apache.storm:storm-core:1.2.1'
            testImplementation 'org.apache.storm:storm-core:1.2.1'
            implementation 'org.apache.storm:storm-kafka-client:1.2.1'

            implementation 'org.squirrelframework:squirrel-foundation:0.3.8'

            implementation 'com.google.guava:guava:30.1-jre'
            implementation 'net.jodah:failsafe:2.4.0'
            implementation 'org.apache.commons:commons-collections4:4.4'
            implementation 'org.apache.commons:commons-lang3:3.12.0'
            implementation 'commons-io:commons-io:2.8.0'
            implementation 'commons-codec:commons-codec:1.15'
            implementation 'args4j:args4j:2.33'
            implementation 'com.google.code.gson:gson:2.8.6'
            implementation 'com.fasterxml.uuid:java-uuid-generator:4.0.1'

            implementation('org.apache.kafka:kafka-clients') {
                version {
                    strictly '2.3.1'
                }
            }
            implementation('org.apache.kafka:kafka_2.11') {
                version {
                    strictly '2.3.1'
                }
            }

            implementation 'com.sabre.oss.conf4j:conf4j-api:1.0'
            implementation 'com.sabre.oss.conf4j:conf4j-core:1.0'
            implementation 'com.sabre.oss.conf4j:conf4j-spring-boot:1.0'

            compileOnly 'org.projectlombok:lombok:1.18.18'
            testCompileOnly 'org.projectlombok:lombok:1.18.18'
            annotationProcessor 'org.projectlombok:lombok:1.18.18'
            testAnnotationProcessor 'org.projectlombok:lombok:1.18.18'
            annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
            testAnnotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

            implementation('org.slf4j:slf4j-api'){
                version {
                    // Limited to 1.7.x by slf4j-impl provided by Storm. Can't be upgraded to 1.8 or higher.
                    strictly '1.7.30'
                }
            }
            testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.30'
            implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.10.0'
            testRuntimeOnly 'org.apache.logging.log4j:log4j-slf4j-impl:2.10.0'
            implementation 'org.apache.logging.log4j:log4j-api:2.10.0'
            testRuntimeOnly 'org.apache.logging.log4j:log4j-api:2.10.0'
            implementation 'org.apache.logging.log4j:log4j-core:2.10.0'
            testRuntimeOnly 'org.apache.logging.log4j:log4j-core:2.10.0'

            implementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
            implementation 'org.junit.vintage:junit-vintage-engine:5.7.1'
            implementation 'com.nitorcreations:matchers:1.3'
            testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
            testImplementation 'org.junit.vintage:junit-vintage-engine:5.7.1'
            testImplementation 'org.hamcrest:hamcrest-library:2.2'
            testImplementation 'org.mockito:mockito-junit-jupiter:3.7.7'
            testImplementation 'org.apache.curator:curator-test:2.8.0'
            testImplementation 'io.netty:netty-all:4.1.60.Final'
            testRuntimeOnly 'javax.servlet:javax.servlet-api:3.1.0'

            implementation 'javax.validation:validation-api:2.0.1.Final'
            implementation 'org.hibernate.validator:hibernate-validator:6.0.1.Final'
            implementation 'org.glassfish:javax.el:3.0.1-b09'
            testImplementation 'org.glassfish:javax.el:3.0.1-b09'

            implementation 'org.aspectj:aspectjrt:1.9.6'
            implementation 'org.mapstruct:mapstruct:1.4.2.Final'
            implementation 'org.mapstruct:mapstruct-processor:1.4.2.Final'
            annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
            testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

            implementation 'io.grpc:grpc-protobuf:1.36.0'
            implementation 'io.grpc:grpc-stub:1.36.0'
            implementation 'io.grpc:grpc-alts:1.36.0'
            testImplementation 'io.grpc:grpc-testing:1.36.0'
            implementation 'com.google.protobuf:protobuf-java-util:3.15.6'

            implementation 'io.springfox:springfox-swagger2:2.9.2'
            implementation 'io.springfox:springfox-swagger-ui:2.9.2'

            implementation 'com.esotericsoftware:kryo:5.0.4'
        }
    }

    task collectDependencyJars(type: Copy) {
        into "$buildDir/dependency-jars"
        from configurations.runtimeClasspath
    }

    task buildAndCopyArtifacts(type: Copy, dependsOn: 'build') {
        onlyIf {
            project.hasProperty('destPath')
        }
        into rootProject.file("${project.findProperty('destPath') ?: ''}")

        from("${project.buildDir}/libs") { into "${project.name}/libs" }
        from("${project.buildDir}/dependency-jars") { into "${project.name}/dependency-jars" }
        from(tasks.processResources) { into "${project.name}/resources" }
        from("${project.file('build.gradle')}") { into "${project.name}" }
    }

    compileJava {
        options.compilerArgs << '-Amapstruct.unmappedTargetPolicy=ERROR'
    }

    checkstyle {
        toolVersion '8.41'
        configDirectory = rootProject.file('checkstyle')
        configProperties = [
                'checkstyle.suppression.file': project.file('src/checkstyle/checkstyle-suppressions.xml'),
                'checkstyle.header.file'     : rootProject.file('checkstyle/checkstyle-header.txt')
        ]

        showViolations = true
        ignoreFailures = false
        maxWarnings = 0

        configurations {
            checkstyle
        }

        dependencies {
            checkstyle 'com.puppycrawl.tools:checkstyle:8.41'
        }
    }

    [checkstyleMain, checkstyleTest].each { task ->
        task.logging.setLevel(LogLevel.LIFECYCLE)
    }

    jacoco {
        toolVersion = '0.8.6'
    }

    jacocoTestReport {
        dependsOn test

        reports {
            xml.enabled true
            csv.enabled false
            html.enabled true
        }
    }

    task generateVersionTxt() {
        doLast {
            File file = new File("$buildDir/version.txt")
            file.write('')
            file.append("Version: ${project.version}")
            file.append("\nBuild-Date: " + DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(new Date()))
            def gitRevision = ''
            try {
                def grgit = Grgit.open(currentDir: rootDir)
                gitRevision = grgit.describe(tags: true)
                grgit.close()
            } catch (IllegalStateException e) {
                // repo is missing/unavailable
            }
            file.append("\nRevision: ${gitRevision}")
        }
    }

    tasks.withType(ShadowJar) {
        // The step detects a conflict in dependency jars' content and fails the build if found.
        doFirst {
            Map<String, String> classes = new HashMap<>()
            getIncludedDependencies().each { jar ->
                JarFile jf = new JarFile(jar)
                jf.entries().each { file ->
                    // TODO: it's good to reuse shadowJar plugin's patterns
                    if (file.name.endsWith('.class') && file.name != 'module-info.class') {
                        if (classes.containsKey(file.name)) {
                            throw new GradleException("shadowJar failure: ${file.name} conflicts in jars:${classes.get(file.name)} and ${jar}")
                        }
                        classes.put(file.name, jar)
                    }
                }
                jf.close()
            }
        }
    }
}

task buildAndCopyArtifacts(type: Copy) {
    onlyIf {
        project.hasProperty('destPath')
    }
    into project.findProperty('destPath')

    def floodlightBuild = gradle.includedBuild('floodlight')
    from(new File(floodlightBuild.projectDir, 'build')) { into floodlightBuild.name }

    dependsOn floodlightBuild.task(':build')
}

configure(subprojects.findAll { it.name.endsWith('-topology') }) {
    configurations {
        localStormRuntime
    }

    dependencies {
        localStormRuntime 'org.apache.storm:storm-core:1.2.1'
    }

    sourceSets {
        main {
            // Allow to run a topology in the local mode (via the main method of the topology definition class).
            runtimeClasspath += project.configurations.localStormRuntime
        }
    }
}
