import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.ajoberstar.grgit.Grgit

import java.text.DateFormat

plugins {
    id "org.sonarqube" version "3.3"
    id "org.ajoberstar.grgit" version "4.1.1" apply false
    id "com.github.johnrengelman.shadow" version "7.1.2" apply false
    id "io.freefair.aspectj.post-compile-weaving" version "6.3.0" apply false
}

allprojects {
    group = "org.openkilda"
    version = "1.0-SNAPSHOT"
}

subprojects {
    apply plugin: "java"
    apply plugin: "checkstyle"
    apply plugin: "jacoco"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.fork = true

        //Use the following parameter to report usages of deprecated code
        //options.compilerArgs += "-Xlint:deprecation"
    }

    repositories {
        mavenCentral()
        maven { url "https://clojars.org/repo" }
    }

    dependencies {
        implementation(platform("com.fasterxml.jackson:jackson-bom:2.16.1"))

        constraints {
            compileOnly("org.projectlombok:lombok:1.18.26")
            testCompileOnly("org.projectlombok:lombok:1.18.26")
            annotationProcessor("org.projectlombok:lombok:1.18.26")
            testAnnotationProcessor("org.projectlombok:lombok:1.18.26")
            annotationProcessor("org.projectlombok:lombok-mapstruct-binding:0.2.0")
            testAnnotationProcessor("org.projectlombok:lombok-mapstruct-binding:0.2.0")

            compileOnly("org.apache.storm:storm-core:2.6.1")
            testImplementation("org.apache.storm:storm-core:2.6.1")
            implementation("org.apache.storm:storm-kafka-client:2.6.1")
            implementation("com.esotericsoftware:kryo:5.6.0")

            implementation("org.squirrelframework:squirrel-foundation:0.3.10")

            implementation("com.google.guava:guava:33.0.0-jre")
            implementation("dev.failsafe:failsafe:3.3.0")
            implementation("org.apache.commons:commons-collections4:4.4")
            implementation("org.apache.commons:commons-lang3:3.12.0")
            implementation("commons-io:commons-io:2.15.0")
            implementation("commons-codec:commons-codec:1.16.1")
            implementation("args4j:args4j:2.33")
            implementation("com.fasterxml.uuid:java-uuid-generator:5.0.0")
            implementation("com.fasterxml.jackson.core:jackson-core:2.16.1")
            implementation("com.fasterxml.jackson.core:jackson-annotations:2.16.1")
            implementation("com.fasterxml.jackson.core:jackson-databind:2.16.1")

            implementation("org.apache.kafka:kafka-clients:3.6.1")
            implementation("org.apache.kafka:kafka_2.12:3.6.1")

            implementation("com.sabre.oss.conf4j:conf4j-api:1.0")
            implementation("com.sabre.oss.conf4j:conf4j-core:1.0")
            implementation("com.sabre.oss.conf4j:conf4j-spring-boot:1.0")

            testRuntimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.23.0")

            implementation("org.junit.jupiter:junit-jupiter-api:5.8.2")
            implementation("com.nitorcreations:matchers:1.3")
            testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.2")
            testImplementation("org.junit.jupiter:junit-jupiter-engine:5.8.2")
            testImplementation("org.hamcrest:hamcrest-library:2.2")
            testImplementation("org.mockito:mockito-junit-jupiter:4.2.0")
            testImplementation("org.apache.curator:curator-test:5.5.0")
            testImplementation("io.netty:netty-all:4.1.107.Final")

            implementation("jakarta.validation:jakarta.validation-api:3.1.0-M1")
            implementation("jakarta.annotation:jakarta.annotation-api:2.1.1")

            implementation("org.hibernate.validator:hibernate-validator:8.0.1.Final")
            testImplementation("org.hibernate.validator:hibernate-validator:8.0.1.Final")
            // The later version of Jakarta EL causes "NoClassDefFoundError: jakarta/el/ELManager" because of the hibernate
            // validator. Update EL, once it is fixed in the validator.
            implementation("org.glassfish:jakarta.el:4.0.2")
            testImplementation("org.glassfish:jakarta.el:4.0.2")

            implementation("org.aspectj:aspectjrt:1.9.21.1")
            implementation("org.mapstruct:mapstruct:1.5.5.Final")
            implementation("org.mapstruct:mapstruct-processor:1.5.5.Final")
            annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")
            testAnnotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")
        }
    }

    tasks.register("collectDependencyJars", Copy) {
        into "$buildDir/dependency-jars"
        from configurations.runtimeClasspath
    }

    tasks.register("buildAndCopyArtifacts", Copy) {
        dependsOn "build"
        onlyIf {
            project.hasProperty("destPath")
        }
        into rootProject.file("${project.findProperty("destPath") ?: ""}")

        from("${project.buildDir}/libs") { into "${project.name}/libs" }
        from("${project.buildDir}/dependency-jars") { into "${project.name}/dependency-jars" }
        from(tasks.processResources) { into "${project.name}/resources" }
        from("${project.file("build.gradle")}") { into "${project.name}" }
    }

    checkstyle {
        toolVersion "9.2.1"
        configDirectory = rootProject.file("checkstyle")
        configProperties = [
                "checkstyle.suppression.file": project.file("src/checkstyle/checkstyle-suppressions.xml"),
                "checkstyle.header.file"     : rootProject.file("checkstyle/checkstyle-header.txt")
        ]

        showViolations = true
        ignoreFailures = false
        maxWarnings = 0

        configurations {
            checkstyle
        }

        dependencies {
            checkstyle "com.puppycrawl.tools:checkstyle:9.2.1"
        }
    }

    jacoco {
        toolVersion = "0.8.11"
    }

    jacocoTestReport {
        dependsOn test

        reports {
            xml.required = true
            csv.required = false
            html.required = true
        }
    }

    tasks.register("generateVersionTxt") {
        doLast {
            File file = new File("$buildDir/version.txt")
            file.write("")
            file.append("Version: ${project.version}")
            file.append("\nBuild-Date: " + DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(new Date()))
            def gitRevision = ""
            try {
                def grgit = Grgit.open(currentDir: rootDir)
                gitRevision = grgit.describe(tags: true)
                grgit.close()
            } catch (IllegalStateException ignored) {
                // repo is missing/unavailable
            }
            file.append("\nRevision: ${gitRevision}")
        }
    }

    tasks.withType(ShadowJar).tap {
        configureEach {
            /**
             * Topology Jars that are uploaded into a Storm cluster shouldn't have duplicate classes that are already
             * provided in the cluster (via Storm-....jar).
             */
            dependencies {
                exclude(dependency("org.slf4j:slf4j-api"))
                exclude(dependency("ch.qos.logback:logback-classic"))
                exclude(dependency("org.apache.logging.log4j:log4j-slf4j-impl"))
            }
        }
    }
}

// This task handles Floodlight build only.
tasks.register("buildAndCopyArtifacts", Copy) {
    onlyIf {
        project.hasProperty("destPath")
    }
    into project.findProperty("destPath")

    def floodlightBuild = gradle.includedBuild("floodlight")
    from(new File(floodlightBuild.projectDir, "build")) { into floodlightBuild.name }

    dependsOn floodlightBuild.task(":build")
}

configure(subprojects.findAll { it.name.endsWith("-topology") }) {
    configurations {
        localStormRuntime
    }

    dependencies {
        localStormRuntime "org.apache.storm:storm-core:2.6.1"
    }

    sourceSets {
        main {
            // Allow to run a topology in the local mode (via the main method of the topology definition class).
            runtimeClasspath += project.configurations.localStormRuntime
        }
    }
}
