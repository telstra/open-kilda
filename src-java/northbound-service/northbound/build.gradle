plugins {
    id("org.springframework.boot") version "3.2.3"
}

configurations {
    // This conflicts with spring-boot-starter-log4j2
    implementation.exclude module: "spring-boot-starter-logging"
}

compileJava.options.compilerArgs += "-Amapstruct.unmappedTargetPolicy=ERROR"

description = "Northbound Service"

configurations.configureEach {
    //LoggerFactory is not a Logback LoggerContext but Logback is on the classpath. Either remove Logback or the competing implementation
    exclude group: "ch.qos.logback", module: "logback-classic"
    exclude group: "ch.qos.logback", module: "logback-core"
}

dependencies {
    implementation(platform("org.springframework:spring-framework-bom:6.0.6"))
    implementation(platform("org.springframework.boot:spring-boot-dependencies:3.2.2"))

    implementation(project(":northbound-api")) { transitive(false) }
    implementation(project(":kilda-model")) { transitive(false) }
    implementation(project(":base-messaging")) { transitive(false) }
    implementation(project(":flowhs-messaging")) { transitive(false) }
    implementation(project(":nbworker-messaging")) { transitive(false) }
    implementation(project(":swmanager-messaging")) { transitive(false) }
    implementation(project(":ping-messaging"))  { transitive(false) }
    implementation(project(":floodlight-api")) { transitive(false) }
    implementation(project(":kilda-persistence-api")) { transitive(false) }
    implementation(project(":blue-green")) { transitive(false) }

    implementation("org.springframework:spring-context:6.1.4")
    implementation("org.springframework.boot:spring-boot-starter-log4j2")
    implementation("org.springframework.security:spring-security-config")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.security:spring-security-web")
    implementation("org.springframework.kafka:spring-kafka:3.1.1")
    implementation("org.springframework:spring-webmvc")

    implementation("org.apache.kafka:kafka-clients:3.6.1")
    implementation("org.apache.kafka:kafka_2.12:3.6.1")

    implementation("org.apache.commons:commons-lang3")
    implementation("org.apache.commons:commons-collections4")

    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0")
    implementation("io.swagger.core.v3:swagger-core-jakarta:2.2.20")

    implementation("com.fasterxml.jackson.core:jackson-databind:2.16.1")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")

    implementation("jakarta.validation:jakarta.validation-api")

    runtimeOnly(project(":kilda-persistence-orientdb"))
    runtimeOnly(project(":kilda-persistence-hibernate"))

    implementation("org.mapstruct:mapstruct")
    implementation("org.mapstruct:mapstruct-processor")
    annotationProcessor("org.mapstruct:mapstruct-processor")

    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok-mapstruct-binding")

    testImplementation(project(":kilda-utils:stubs"))
    testImplementation(project(path: ":kilda-persistence-tinkerpop", configuration: "testArtifacts"))
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test:6.2.2")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
}

bootJar {
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    mainClass = "org.openkilda.northbound.Application"
    archiveFileName = "${archivesBaseName}.${archiveExtension.get()}"
}

bootJar.dependsOn generateVersionTxt

test {
    useJUnitPlatform()
}

