<?xml version="1.0" encoding="UTF-8"?>
<changelog xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:noNamespaceSchemaLocation="http://www.liquigraph.org/schema/1.0/liquigraph.xsd">
    <changeset id="1.0-create-flows-with-paths-n-resources" author="Sergii Iakovenko">
        <precondition if-not-met="FAIL">
            <!-- Validate flows, no orphans entities or invalid cookies allowed. -->
            <and>
                <query><![CDATA[
                       MATCH (src:switch)-[forward:flow]->(dst:switch)
                       OPTIONAL MATCH (dst)-[reverse:flow {
                               flowid: forward.flowid
                           }]->(src)
                       WITH forward, reverse
                       WHERE reverse.flowid IS NULL
                       RETURN count(forward) = 0 as result
                ]]></query>
                <query><![CDATA[
                       MATCH (src:switch)-[forward:flow]->(dst:switch)
                       MATCH (dst)-[reverse:flow {
                               flowid: forward.flowid
                           }]->(src)
                       WHERE (src.name <> dst.name
                           OR forward.src_port = reverse.dst_port AND forward.src_vlan = reverse.dst_vlan)
                           AND (forward.cookie < 4611686018427387904 AND reverse.cookie < 4611686018427387904
                           OR forward.cookie > 4611686018427387904 AND reverse.cookie > 4611686018427387904)
                       RETURN count(forward) = 0 AND count(reverse) = 0 as result
                ]]></query>
            </and>
        </precondition>

        <!-- Create a flow node for each forward flow. -->
        <query><![CDATA[
            MATCH (src:switch)-[forward:flow]->(dst:switch)
            WHERE forward.cookie > 4611686018427387904
            MERGE (src)<-[:source]-(f:flow {
                    flow_id: forward.flowid,
                    src_port: forward.src_port,
                    src_vlan: forward.src_vlan,
                    dst_port: forward.dst_port,
                    dst_vlan: forward.dst_vlan,
                    forward_path_id: forward.flowid + "_forward",
                    reverse_path_id: forward.flowid + "_reverse",
                    bandwidth: forward.bandwidth,
                    ignore_bandwidth: forward.ignore_bandwidth,
                    status: "up",
                    encapsulation_type: "transit_vlan",
                    time_create: coalesce(forward.time_create, forward.time_modify)
                })-[:destination]->(dst)
                SET f.group_id = forward.group_id, f.priority = forward.priority,
                    f.description = forward.description, f.max_latency = forward.max_latency,
                    f.periodic_pings = coalesce(forward.periodic_pings, false),
                    f.time_modify = forward.time_modify
        ]]></query>

        <!-- Create a forward path for each flow. -->
        <query><![CDATA[
            MATCH (src:switch)-[forward:flow]->(dst:switch)
            WHERE forward.cookie > 4611686018427387904
            MATCH (src)<-[:source]-(f:flow {flow_id: forward.flowid})-[:destination]->(dst)
            MERGE (src)<-[:source]-(fp:flow_path {
                    path_id: forward.flowid + "_forward", 
                    flow_id: forward.flowid, 
                    cookie: forward.cookie, 
                    bandwidth: forward.bandwidth,
                    ignore_bandwidth: forward.ignore_bandwidth, 
                    time_create: coalesce(forward.time_create, forward.time_modify),
                    status: "active",
                    latency: apoc.convert.fromJsonMap(forward.flowpath).latency_ns
                })-[:destination]->(dst)
            SET fp.meter_id = forward.meter_id, fp.time_modify = forward.time_modify
            MERGE (f)-[:owns]->(fp)
        ]]></query>

        <!-- Create a reverse path for each flow. -->
        <query><![CDATA[
            MATCH (src:switch)-[reverse:flow]->(dst:switch)
            WHERE reverse.cookie < 4611686018427387904
            MATCH (dst)<-[:source]-(f:flow {flow_id: reverse.flowid})-[:destination]->(src)
            MERGE (src)<-[:source]-(fp:flow_path {
                    path_id: reverse.flowid + "_reverse", 
                    flow_id: reverse.flowid, 
                    cookie: reverse.cookie, 
                    bandwidth: reverse.bandwidth,
                    ignore_bandwidth: reverse.ignore_bandwidth, 
                    time_create: coalesce(reverse.time_create, reverse.time_modify),
                    status: "active",
                    latency: apoc.convert.fromJsonMap(reverse.flowpath).latency_ns
                })-[:destination]->(dst)
            SET fp.meter_id = reverse.meter_id, fp.time_modify = reverse.time_create
            MERGE (f)-[:owns]->(fp)
        ]]></query>

        <!-- Create a flow cookie entity for each flow. -->
        <query><![CDATA[
            MATCH (src:switch)-[forward:flow]->(dst:switch)
            WHERE forward.cookie > 4611686018427387904
            MERGE (:flow_cookie {
                    flow_id: forward.flowid, 
                    unmasked_cookie: forward.cookie - 4611686018427387904
                })
        ]]></query>

        <!-- Create a flow meter entities for each forward path. -->
        <query><![CDATA[
            MATCH (src:switch)-[forward:flow]->(dst:switch)
            WHERE forward.cookie > 4611686018427387904 AND forward.meter_id IS NOT NULL
            MERGE (src)-[:owns]->(:flow_meter {
                    meter_id: forward.meter_id, 
                    flow_id: forward.flowid, 
                    path_id: forward.flowid + "_forward", 
                    unique_index: src.name + "_" + forward.meter_id
                })
        ]]></query>

        <!-- Create a transit vlan entities for each forward path. -->
        <query><![CDATA[
            MATCH (src:switch)-[forward:flow]->(dst:switch)
            WHERE forward.cookie > 4611686018427387904 AND forward.transit_vlan <> 0
            MERGE (:transit_vlan {
                    flow_id: forward.flowid,
                    path_id: forward.flowid + "_forward",
                    vlan: forward.transit_vlan
                })
        ]]></query>

        <!-- Create a flow meter entities for each reverse path. -->
        <query><![CDATA[
            MATCH (src:switch)-[reverse:flow]->(dst:switch)
            WHERE reverse.cookie < 4611686018427387904 AND reverse.meter_id IS NOT NULL
            MERGE (src)-[:owns]->(:flow_meter {
                    meter_id: reverse.meter_id, 
                    flow_id: reverse.flowid, 
                    path_id: reverse.flowid + "_reverse", 
                    unique_index: src.name + "_" + reverse.meter_id
                })
        ]]></query>

        <!-- Create a transit vlan entities for each reverse path. -->
        <query><![CDATA[
            MATCH (src:switch)-[reverse:flow]->(dst:switch)
            WHERE reverse.cookie < 4611686018427387904  AND reverse.transit_vlan <> 0
            MERGE (:transit_vlan {
                    flow_id: reverse.flowid,
                    path_id: reverse.flowid + "_reverse",
                    vlan: reverse.transit_vlan
                })
        ]]></query>
    </changeset>

    <changeset id="1.0-create-path-segments" author="Sergii Iakovenko">
        <precondition if-not-met="FAIL">
            <!-- Validate flow segments against flows. -->
            <query><![CDATA[
                MATCH ()-[fs:flow_segment]->()
                OPTIONAL MATCH ()-[f:flow {
                        flowid: fs.flowid,
                        cookie: fs.cookie
                    }]->()
                WITH f
                WHERE f.flowid IS NULL
                RETURN count(f) = 0 as result
            ]]></query>
        </precondition>

        <!-- Create path segments for each forward path. -->
        <query><![CDATA[
            MATCH (src:switch)-[forward:flow]->(dst:switch)
            WHERE forward.cookie > 4611686018427387904
            MATCH (fs_src)-[fs:flow_segment{
                    flowid: forward.flowid,
                    cookie: forward.cookie
                }]->(fs_dst)
            MATCH (fp:flow_path {path_id: fs.flowid + "_forward"})
            MERGE (fs_src)<-[:source]-(ps:path_segment {
                    path_id: fs.flowid + "_forward",
                    src_port: fs.src_port,
                    dst_port: fs.dst_port,
                    seq_id: fs.seq_id
	            })-[:destination]->(fs_dst)
            SET ps.latency = fs.segment_latency
            MERGE (fp)-[:owns]->(ps)
        ]]></query>

        <!-- Create path segments for each reverse path. -->
        <query><![CDATA[
            MATCH (src:switch)-[reverse:flow]->(dst:switch)
            WHERE reverse.cookie < 4611686018427387904
            MATCH (fs_src)-[fs:flow_segment {
                    flowid: reverse.flowid,
                    cookie: reverse.cookie
	            }]->(fs_dst)
            MATCH (fp:flow_path {path_id: fs.flowid + "_reverse"})
            MERGE (fs_src)<-[:source]-(ps:path_segment {
                    path_id: fs.flowid + "_reverse",
                    src_port: fs.src_port,
                    dst_port: fs.dst_port,
                    seq_id: fs.seq_id
                })-[:destination]->(fs_dst)
            SET ps.latency = fs.segment_latency
            MERGE (fp)-[:owns]->(ps)
        ]]></query>
    </changeset>
</changelog>
