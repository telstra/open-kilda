parallelism = 1
workers = 1

zookeeper.hosts = zookeeper.pendev:2181
zookeeper.session.timeout = 5
zookeeper.connect.timeout = 5

kafka.hosts = kafka.pendev:9092
kafka.partitions.default = 1
kafka.replication.default = 3
kafka.topic.ctrl = kilda.ctrl
kafka.topic.flow = kilda.flow
kafka.topic.health.check = kilda.health.check
kafka.topic.northbound = kilda.northbound
kafka.topic.opentsdb = kilda.otsdb
kafka.topic.simulator = kilda.simulator
kafka.topic.speaker = kilda.speaker
kafka.topic.stats = kilda.stats
kafka.topic.topo.cache = kilda.topo.cache
kafka.topic.topo.disco = kilda.topo.disco
kafka.topic.topo.eng = kilda.topo.eng

opentsdb.hosts = http://opentsdb.pendev:4242
opentsdb.timeout = 30
opentsdb.client.chunked-requests.enabled=true

opentsdb.num.spouts = 5
opentsdb.num.opentsdbfilterbolt = 10
opentsdb.num.opentsdbbolt = 10
opentsdb.workers.opentsdbolt = 10
opentsdb.num.datapointparserbolt = 5
opentsdb.workers.datapointparserbolt = 5
opentsdb.batch.size = 50
opentsdb.flush.interval = 1
opentsdb.workers = 5

neo4j.hosts = neo4j.pendev:7687
neo4j.user = neo4j
neo4j.pswd = temppass

filter.directory =
logger.level = INFO
logger.watermark =


#######
# Discovery
# - discovery.interval = how many bolt ticks(1 tick per second) between ISL discovery / health checks, starts from 0
# - discovery.timeout = at which point do we send an ISL Failure (if it is an ISL)
#       - NB: the number is in "ticks", not "attempts" .. attempts = timeout/interval
# - discovery.limit = at what point do we stop sending? -1 means never ..
# - discovery.speaker-failure-timeout - after this amount of seconds without a
#   message from speaker it will be marked as unavailable
discovery.interval = 2
discovery.timeout = 9
discovery.limit = -1
discovery.speaker-failure-timeout = 5
discovery.drop-input-message-in-seconds = 300
discovery.dump-request-timeout-seconds = 60

local = no
local.execution.time = 300

