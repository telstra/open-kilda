/* Copyright (C) 2017 NoviFlow Inc.

 This software was developed at NoviFlow Inc (www.noviflow.com).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 implied.

 See the License for the specific language governing permissions and
 limitations under the License

 About this document -
 Document Number:     PD-0014
 Document Version:    1.0
 Date:                2018/12/18
 Document Type:       Protocol Description
 Product:             NoviSwitch
 Software Release:    NoviWare 400.6.4
 Document Title:      gRPC proto file for NoviSwitch
*/

syntax = "proto3";

package noviflow;

option java_multiple_files = true;
option java_package = "io.grpc.noviflow";
option java_outer_classname = "noviFlowProto";
option objc_class_prefix = "NF";


service NoviFlowGrpc {
    rpc SetConfigController (Controller) returns (CliReply) {
    }
    rpc DelConfigController (Controller) returns (CliReply) {
    }
    rpc ShowConfigController (Controller) returns (stream Controller) {
    }
    rpc ShowStatusOfChannel (Controller) returns (stream Controller) {
    }

    rpc SetConfigAuxiliary (Controller) returns (CliReply) {
    }
    rpc DelConfigAuxiliary (Controller) returns (CliReply) {
    }
    rpc ShowConfigAuxiliary (Controller) returns (stream Controller) {
    }

    rpc SetConfigSecurity (Security) returns (CliReply) {
    }
    rpc DelConfigSecurity (Security) returns (CliReply) {
    }
    rpc ShowConfigSecurity (ShowSecurity) returns (stream Security) {
    }

    rpc SetConfigDns (Dns) returns (CliReply) {
    }
    rpc ShowConfigDns (ShowDns) returns (stream Dns) {
    }


    rpc SetConfigOfClient (OfClient) returns (CliReply) {
    }
    rpc DelConfigOfClient (OfClient) returns (CliReply) {
    }
    rpc ShowConfigOfClient (ShowOfClient) returns (stream OfClient) {
    }


    rpc SetConfigOfServer (OfServer) returns (CliReply) {
    }
    rpc DelConfigOfServer (OfServer) returns (CliReply) {
    }
    rpc ShowConfigOfServer (ShowOfServer) returns (stream OfServer) {
    }

    rpc SetConfigNtpServer (Ntp) returns (CliReply) {
    }
    rpc SetConfigNtpStatus (Ntp) returns (CliReply) {
    }
    rpc ShowConfigNtp (ShowNtp) returns (stream Ntp) {
    }

    rpc SetConfigAaaServer (AaaServer) returns (CliReply) {
    }
    rpc DelConfigAaaServer (AaaServer) returns (CliReply) {
    }
    rpc ShowConfigAaaServer (ShowAaaServer) returns (stream AaaServer) {
    }


    rpc SetConfigAcl (Acl) returns (CliReply) {
    }
    rpc DelConfigAcl (Acl) returns (CliReply) {
    }
    rpc ShowConfigAcl (ShowAcl) returns (stream Acl) {
    }

    rpc SetConfigSnmp (Snmp) returns (CliReply) {
    }
    rpc DelConfigSnmp (Snmp) returns (CliReply) {
    }
    rpc ShowConfigSnmp (Snmp) returns (stream ShowSnmp) {
    }

    rpc SetConfigRemoteLogServer (RemoteLogServer) returns (CliReply) {
    }
    rpc DelConfigRemoteLogServer (RemoteLogServer) returns (CliReply) {
    }
    rpc ShowConfigRemoteLogServer (ShowRemoteLogServer) returns (stream RemoteLogServer) {
    }

    rpc SetConfigCookie (Cookie) returns (CliReply) {
    }
    rpc ShowConfigCookie (ShowCookie) returns (stream Cookie) {
    }

    rpc SetConfigLogicalPort (LogicalPort) returns (CliReply) {
    }
    rpc ShowConfigLogicalPort (LogicalPort) returns (stream LogicalPort) {
    }
    rpc DelConfigLogicalPort (LogicalPort) returns (CliReply) {
    }

    rpc SetConfigRemoteCfgServer (RemoteCfgServer) returns (CliReply) {
    }
    rpc DelConfigRemoteCfgServer (RemoteCfgServer) returns (CliReply) {
    }
    rpc ShowConfigRemoteCfgServer (ShowRemoteCfgServer) returns (stream RemoteCfgServer) {
    }


    rpc SetConfigUser (UserInfo) returns (CliReply) {
    }
    rpc DelConfigUser (UserInfo) returns (CliReply) {
    }
    rpc ShowConfigUser (ShowUser) returns (stream UserInfo) {
    }

    rpc SetConfigPipelineTable (PipelineTable) returns (CliReply) {
    }
    rpc SetConfigPipelineTablesizes (PipelineTablesizes) returns (CliReply) {
    }
    rpc SetConfigPipelineTableMatchfields (PipelineTableMatchfields) returns (CliReply) {
    }
    rpc SetConfigPipelineApply (PipelineApply) returns (CliReply) {
    }
    rpc SetConfigPipelineDefault (PipelineDefault) returns (CliReply) {
    }
    rpc SetConfigPipelineLoadProfile (PipelineLoadProfile) returns (CliReply) {
    }
    rpc SetConfigPipelineHashAlgorithm (PipelineHashAlgorithm) returns (CliReply) {
    }
    rpc SetConfigPipelineGroups (PipelineGroups) returns (CliReply) {
    }
    rpc SetConfigPipelineGroupStats (PipelineGroupStats) returns (CliReply) {
    }
    rpc SetConfigPipelineMeters (PipelineMeters) returns (CliReply) {
    }
    rpc SetConfigPipelineMeterStats (PipelineMeterStats) returns (CliReply) {
    }
    rpc SetConfigPipelineExpMatchField (ExpMatchField) returns (CliReply) {
    }
    rpc SetConfigPipelineActions (PipelineActions) returns (CliReply) {
    }
    rpc SetConfigPipelineActionsSetField (PipelineActionsSetField) returns (CliReply) {
    }
    rpc SetConfigPipelineCopyProfile (PipelineCopyProfile) returns (CliReply) {
    }
    rpc SetConfigPipelineSwapProfile (PipelineSwapProfile) returns (CliReply) {
    }
    rpc SetConfigPipelineHashProfile (PipelineHashProfile) returns (CliReply) {
    }
    rpc SetConfigPipelineHashMatchFields (PipelineHashMatchFields) returns (CliReply) {
    }
    rpc SetConfigPipelineActionChains (PipelineActionChains) returns (CliReply) {
    }
    rpc SetConfigPipelineActionChainsFactor (PipelineActionChainsFactor) returns (CliReply) {
    }
    rpc DelConfigPipeline (PipelineTable) returns (CliReply) {
    }
    rpc DelConfigPipelineOption (PipelineDelOption) returns (CliReply) {
    }
    rpc DelConfigPipelineTableMatchFields (PipelineTable) returns (CliReply) {
    }
    rpc ShowConfigPipeline (ShowPipeline) returns (stream PipelineTable) {
    }
    rpc ShowConfigPipelineInfo (ShowPipelineInfo) returns (stream PipelineInfo) {
    }

    rpc SetConfigMeter (Meter) returns (CliReply) {
    }
    rpc ShowConfigMeter (Meter) returns (stream Meter) {
    }
    rpc DelConfigMeter (Meter) returns (CliReply) {
    }
    rpc SetConfigMeterProfile (MeterProfile) returns (CliReply) {
    }
    rpc ShowConfigMeterProfile (ShowMeterProfile) returns (stream MeterProfile) {
    }
    rpc DelConfigMeterProfile (MeterProfile) returns (CliReply) {
    }

    rpc SetConfigPort (PortConfig) returns (CliReply) {
    }

    rpc SetConfigSwitchDateTime (SwitchDateTime) returns (CliReply) {
    }
    rpc SetConfigSwitchHostname (SwitchHostname) returns (CliReply) {
    }
    rpc SetConfigSwitchSessionIdleTimeout (SwitchSessionIdleTimeout) returns (CliReply) {
    }

    rpc SetLogMessages (LogMessages) returns (CliReply) {
    }
    rpc SetLogOferrors (LogOferrors) returns (CliReply) {
    }

    rpc ShowStatusSwitch (StatusSwitch) returns (stream StatusSwitch) {
    }

    rpc SetConfigClass (Class) returns (CliReply) {
    }
    rpc DelConfigClass (Class) returns (CliReply) {
    }
    rpc ShowConfigClass (Class) returns (stream Class) {
    }
    rpc ShowConfigClassNotDefined (Class) returns (stream ClassNotDefined) {
    }

    rpc SetConfigClassProfile (ClassProfile) returns (CliReply) {
    }
    rpc DelConfigClassProfile (ClassProfile) returns (CliReply) {
    }
    rpc ShowConfigClassProfile (ClassProfile) returns (stream ShowClassProfile) {
    }

    rpc SetConfigServiceProfile (ServiceProfile) returns (CliReply) {
    }
    rpc DelConfigServiceProfile (ServiceProfile) returns (CliReply) {
    }
    rpc ShowConfigServiceProfile (ServiceProfile) returns (stream ShowServiceProfile) {
    }

    rpc SetConfigSubport (Subport) returns (CliReply) {
    }
    rpc DelConfigSubport (Subport) returns (CliReply) {
    }
    rpc ShowConfigSubport (Subport) returns (stream Subport) {
    }
    rpc ShowConfigSubportNotDefined (Subport) returns (stream SubportNotDefined) {
    }

    rpc SetConfigPtp (Ptp) returns (CliReply) {
    }
    rpc DelConfigPtp (Ptp) returns (CliReply) {
    }
    rpc ShowConfigPtp (ShowPtp) returns (stream Ptp) {
    }

    rpc SaveConfig (SaveConfigParameters) returns (CliReply) {
    }

    rpc SetStatusSwitchReboot (RebootShutdown) returns (CliReply) {
    }
    rpc SetStatusSwitchShutdown (RebootShutdown) returns (CliReply) {
    }
    rpc SetStatusSwitchUpgrade (RebootShutdown) returns (CliReply) {
    }
    rpc SetLoginDetails (AuthenticateUser) returns (CliReply) {
    }

    rpc DelStatsTable (ShowTableStats) returns (CliReply) {
    }
    rpc DelStatsPort (ShowPortStats) returns (CliReply) {
    }
    rpc DelStatsLogicalPort (ShowLogicalPortStats) returns (CliReply) {
    }
    rpc DelStatsMeter (ShowMeterStats) returns (CliReply) {
    }
    rpc DelStatsFlow (ShowFlowStats) returns (CliReply) {
    }
    rpc DelStatsClass (ShowClassStats) returns (CliReply) {
    }
    rpc DelStatsGroup (ShowGroupStats) returns (CliReply) {
    }
    rpc DelStatsPacketInOut (ShowPacketInOutStats) returns (CliReply) {
    }

    rpc SetConfigTable (Table) returns (CliReply) {
    }
    rpc ShowConfigTable (ShowTable) returns (stream Table) {
    }

    rpc ShowStatsTable (ShowTableStats) returns (stream TableStats) {
    }
    rpc ShowStatsLogicalPort (ShowLogicalPortStats) returns (stream LogicalPortStats) {
    }
    rpc ShowStatsPort (ShowPortStats) returns (stream PortStats) {
    }
    rpc ShowStatsMeter (ShowMeterStats) returns (stream MeterStats) {
    }
    rpc ShowStatsClass (ShowClassStats) returns (stream ClassStats) {
    }
    rpc ShowStatsPacketInOut (ShowPacketInOutStats) returns (stream PacketInOutStats) {
    }
    rpc ShowStatsGroup (ShowGroupStats) returns (stream GroupStats) {
    }

    rpc DelConfigGroup (Group) returns (CliReply) {
    }
    rpc DelConfigFlowId (FlowId) returns (CliReply) {
    }
    rpc DelConfigFlow (Flow) returns (CliReply) {
    }
    rpc DelConfigBfd (Bfd) returns (CliReply) {
    }

    rpc SetConfigLicense (License) returns (CliReply) {
    }
}

// Enums
enum ReservedIds {
    RESERVED = 0;
    ALL = 1;
    CONTROLLER = 2;
    LOCAL = 3;
}

enum SecurityModuleType {
    SECURITY_MODULE_TYPE_RESERVED = 0;
    SECURITY_MODULE_TYPE_GRPC = 1;
    SECURITY_MODULE_TYPE_OFCHANNEL = 2;
}

//Values of enum respects the Openflow and Noviswitch specifications
// *** denotes expmatchfields that can be configured via set config table tableid <tableid> expmatchfield <expmatchfield> size <size> offset <offset>
enum ExpMatchFieldType {
    EXP_MATCH_FIELD_TYPE_RESERVED = 0;
    EXP_MATCH_FIELD_TYPE_UDP_PAYLOAD = 1; // ***
    EXP_MATCH_FIELD_TYPE_IP_PAYLOAD = 2; // ***
    EXP_MATCH_FIELD_TYPE_MPLS_PAYLOAD = 3; // ***
    EXP_MATCH_FIELD_TYPE_HASH_RESULT = 4;
    EXP_MATCH_FIELD_TYPE_ETH_PAYLOAD = 5; // ***
    EXP_MATCH_FIELD_TYPE_RX_TIMESTAMP = 6;
    EXP_MATCH_FIELD_TYPE_TX_TIMESTAMP = 7;
    EXP_MATCH_FIELD_TYPE_PKT_OFFSET = 8;
    EXP_MATCH_FIELD_TYPE_PPPOE_CODE = 9;
    EXP_MATCH_FIELD_TYPE_PPPOE_SESSIONID = 10;
    EXP_MATCH_FIELD_TYPE_PPP_PROTOID = 11;
    EXP_MATCH_FIELD_TYPE_L2TP_PACKETTYPE = 12;
    EXP_MATCH_FIELD_TYPE_L2TP_TUNNELID = 13;
    EXP_MATCH_FIELD_TYPE_L2TP_SESSIONID = 14;
}

enum MatchFieldType {
    MATCH_FIELD_TYPE_IN_PORT = 0;
    MATCH_FIELD_TYPE_IN_PHY_PORT = 1;
    MATCH_FIELD_TYPE_METADATA = 2;
    MATCH_FIELD_TYPE_ETH_DST = 3;
    MATCH_FIELD_TYPE_ETH_SRC = 4;
    MATCH_FIELD_TYPE_ETH_TYPE = 5;
    MATCH_FIELD_TYPE_VLAN_VID = 6;
    MATCH_FIELD_TYPE_VLAN_PCP = 7;
    MATCH_FIELD_TYPE_IP_DSCP = 8;
    MATCH_FIELD_TYPE_IP_ECN = 9;
    MATCH_FIELD_TYPE_IP_PROTO = 10;
    MATCH_FIELD_TYPE_IPV4_SRC = 11;
    MATCH_FIELD_TYPE_IPV4_DST = 12;
    MATCH_FIELD_TYPE_TCP_SRC = 13;
    MATCH_FIELD_TYPE_TCP_DST = 14;
    MATCH_FIELD_TYPE_UDP_SRC = 15;
    MATCH_FIELD_TYPE_UDP_DST = 16;
    MATCH_FIELD_TYPE_SCTP_SRC = 17;
    MATCH_FIELD_TYPE_SCTP_DST = 18;
    MATCH_FIELD_TYPE_ICMPV4_TYPE = 19;
    MATCH_FIELD_TYPE_ICMPV4_CODE = 20;
    MATCH_FIELD_TYPE_ARP_OP = 21;
    MATCH_FIELD_TYPE_ARP_SPA = 22;
    MATCH_FIELD_TYPE_ARP_TPA = 23;
    MATCH_FIELD_TYPE_ARP_SHA = 24;
    MATCH_FIELD_TYPE_ARP_THA = 25;
    MATCH_FIELD_TYPE_IPV6_SRC = 26;
    MATCH_FIELD_TYPE_IPV6_DST = 27;
    MATCH_FIELD_TYPE_IPV6_FLABEL = 28;
    MATCH_FIELD_TYPE_ICMPV6_TYPE = 29;
    MATCH_FIELD_TYPE_ICMPV6_CODE = 30;
    MATCH_FIELD_TYPE_IPV6_ND_TARGET = 31;
    MATCH_FIELD_TYPE_IPV6_ND_SLL = 32;
    MATCH_FIELD_TYPE_IPV6_ND_TLL = 33;
    MATCH_FIELD_TYPE_MPLS_LABEL = 34;
    MATCH_FIELD_TYPE_MPLS_TC = 35;
    MATCH_FIELD_TYPE_MPLS_BOS = 36;
    MATCH_FIELD_TYPE_PBB_ISID = 37;
    MATCH_FIELD_TYPE_TUNNEL_ID = 38;
    MATCH_FIELD_TYPE_IPV6_EXTHDR = 39;
    MATCH_FIELD_TYPE_PBB_UCA = 41;
    MATCH_FIELD_TYPE_ETH_PAYLOAD = 42;
    MATCH_FIELD_TYPE_IP_PAYLOAD = 43;
    MATCH_FIELD_TYPE_MPLS_PAYLOAD = 44;
    MATCH_FIELD_TYPE_UDP_PAYLOAD = 45;
    MATCH_FIELD_TYPE_VXLAN_VNI = 68;
}

enum OfVersion {
    OF_VERSION_RESERVED = 0;
    OF_VERSION_ANY = 1;
    OF_VERSION_OF13 = 4;
    OF_VERSION_OF14 = 5;
    OF_VERSION_OF15 = 6;
}

enum OnOff {
    ONOFF_RESERVED = 0;
    OFF = 1;
    ON = 2;
}

enum YesNo {
    YESNO_RESERVED = 0;
    YES = 1;
    NO = 2;
}

enum SecurityType {
    SECURITY_TYPE_RESERVED = 0;
    SECURITY_TYPE_TLS = 1;
    SECURITY_TYPE_NONE = 2;
}

enum SaveType {
    SAVE_TYPE_RESERVED = 0;
    SAVE_TYPE_ALL = 1;
    SAVE_TYPE_NOENTRIES = 2;
    SAVE_TYPE_NOPIPELINE = 3;
    SAVE_TYPE_NONE = 4;
}

enum SaveConfigType {
    SAVE_CONFIG_TYPE_RESERVED = 0;
    SAVE_CONFIG_TYPE_ALL = 1;
    SAVE_CONFIG_TYPE_ALL_NOENTRIES = 2;
    SAVE_CONFIG_TYPE_ALL_NOPIPELINE = 3;
    SAVE_CONFIG_TYPE_ENTRIES = 4;
}

enum AaaType {
    AAA_TYPE_RESERVED = 0;
    AAA_TYPE_RADIUS = 1;
    AAA_TYPE_TACACSPLUS = 2;
}

enum SnmpType {
    SNMP_TYPE_RESERVED = 0;
    SNMP_TYPE_TRAP = 1;
    SNMP_TYPE_GET = 2;
}

enum SnmpVersion {
    SNMP_VERSION_RESERVED = 0;
    SNMP_VERSION_V2C = 1;
    SNMP_VERSION_V3 = 2;
    SNMP_VERSION_ALL = 3;
}

enum SnmpAuth {
    SNMP_AUTH_RESERVED = 0;
    SNMP_AUTH_NONE = 1;
    SNMP_AUTH_MD5 = 2;
    SNMP_AUTH_SHA = 3;
}

enum SnmpPriv {
    SNMP_PRIV_RESERVED = 0;
    SNMP_PRIV_NONE = 1;
    SNMP_PRIV_DES = 2;
    SNMP_PRIV_AES = 3;
}

enum User {
    USER_RESERVED = 0;
    USER_OF = 1;
    USER_MGT = 2;
}

enum UserGroupType {
    USER_GROUP_TYPE_RESERVED = 0;
    USER_GROUP_TYPE_SUPERUSER = 1;
    USER_GROUP_TYPE_ADMIN = 2;
    USER_GROUP_TYPE_MONITORING = 3;
    USER_GROUP_TYPE_OFCONFIG = 4;
}

enum PipelineTableType {
    PIPELINE_TABLE_TYPE_RESERVED = 0;
    PIPELINE_TABLE_TYPE_WILDCARDMATCH = 1;
    PIPELINE_TABLE_TYPE_EXACTMATCH = 2;
}

enum PipelineUnitType {
    PIPELINE_UNIT_TYPE_OFF = 0;
    PIPELINE_UNIT_TYPE_ALL = 1;
    PIPELINE_UNIT_TYPE_PACKETS = 2;
    PIPELINE_UNIT_TYPE_BYTES = 3;
}

enum PipelineMeterUnitType {
    PIPELINE_METER_UNIT_TYPE_RESERVED = 0;
    PIPELINE_METER_UNIT_TYPE_KBYTES = 1;
    PIPELINE_METER_UNIT_TYPE_PACKETS = 2;
}

enum PipelineHashAlgorithmType {
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_32 = 0;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_16 = 8;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_16_BUYPASS = 9;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_16_DDS_110 = 10;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_16_DECT = 11;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_16_DNP = 12;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_16_EN_13757 = 13;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_16_GENIBUS = 14;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_16_MAXIM = 15;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_16_MCRF4XX = 16;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_16_RIELLO = 17;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_16_T10_DIF = 18;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_16_TELEDISK = 19;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_16_USB = 20;
    PIPELINE_HASH_ALGORITHM_TYPE_X_25 = 21;
    PIPELINE_HASH_ALGORITHM_TYPE_XMODEM = 22;
    PIPELINE_HASH_ALGORITHM_TYPE_MODBUS = 23;
    PIPELINE_HASH_ALGORITHM_TYPE_KERMIT = 24;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_CCITT_ = 25;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_AUG_CCITT = 26;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_32_BZIP2 = 27;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_32C = 28;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_32D = 29;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_32_MPEG = 30;
    PIPELINE_HASH_ALGORITHM_TYPE_POSIX = 31;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_32Q = 32;
    PIPELINE_HASH_ALGORITHM_TYPE_JAMCRC = 33;
    PIPELINE_HASH_ALGORITHM_TYPE_XFER = 34;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_64 = 35;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_64_WE = 36;
    PIPELINE_HASH_ALGORITHM_TYPE_CRC_64_JONES = 37;
    PIPELINE_HASH_ALGORITHM_TYPE_IDENTITY = 38;
    PIPELINE_HASH_ALGORITHM_TYPE_IDENTITY_MSB = 39;
    PIPELINE_HASH_ALGORITHM_TYPE_IDENTITY_LSB = 40;

    PIPELINE_HASH_ALGORITHM_TYPE_RESERVED = 99;
}

enum PipelineActionType {
    PIPELINE_ACTION_TYPE_SET_ETH_DST = 0;
    PIPELINE_ACTION_TYPE_SET_ETH_SRC = 1;
    PIPELINE_ACTION_TYPE_SET_ETH_TYPE = 2;
    PIPELINE_ACTION_TYPE_SET_VLAN_VID = 3;
    PIPELINE_ACTION_TYPE_SET_VLAN_PCP = 4;
    PIPELINE_ACTION_TYPE_SET_IP_DSCP = 5;
    PIPELINE_ACTION_TYPE_SET_IP_ECN = 6;
    PIPELINE_ACTION_TYPE_SET_IP_PROTO = 7;
    PIPELINE_ACTION_TYPE_SET_IPV4_SRC = 8;
    PIPELINE_ACTION_TYPE_SET_IPV4_DST = 9;
    PIPELINE_ACTION_TYPE_SET_IPV6_SRC = 10;
    PIPELINE_ACTION_TYPE_SET_IPV6_DST = 11;
    PIPELINE_ACTION_TYPE_SET_TCP_SRC = 12;
    PIPELINE_ACTION_TYPE_SET_TCP_DST = 13;
    PIPELINE_ACTION_TYPE_SET_UDP_SRC = 14;
    PIPELINE_ACTION_TYPE_SET_UDP_DST = 15;
    PIPELINE_ACTION_TYPE_SET_SCTP_SRC = 16;
    PIPELINE_ACTION_TYPE_SET_SCTP_DST = 17;
    PIPELINE_ACTION_TYPE_SET_ICMPV4_TYPE = 18;
    PIPELINE_ACTION_TYPE_SET_ICMPV4_CODE = 19;
    PIPELINE_ACTION_TYPE_SET_ICMPV6_TYPE = 20;
    PIPELINE_ACTION_TYPE_SET_ICMPV6_CODE = 21;
    PIPELINE_ACTION_TYPE_SET_ARP_OP = 22;
    PIPELINE_ACTION_TYPE_SET_ARP_SPA = 23;
    PIPELINE_ACTION_TYPE_SET_ARP_TPA = 24;
    PIPELINE_ACTION_TYPE_SET_ARP_SHA = 25;
    PIPELINE_ACTION_TYPE_SET_ARP_THA = 26;
    PIPELINE_ACTION_TYPE_SET_IPV6_FLABEL = 27;
    PIPELINE_ACTION_TYPE_SET_IPV6_ND_TARGET = 28;
    PIPELINE_ACTION_TYPE_SET_IPV6_ND_SLL = 29;
    PIPELINE_ACTION_TYPE_SET_IPV6_ND_TLL = 30;
    PIPELINE_ACTION_TYPE_SET_MPLS_LABEL = 31;
    PIPELINE_ACTION_TYPE_SET_MPLS_TC = 32;
    PIPELINE_ACTION_TYPE_SET_MPLS_BOS = 33;
    PIPELINE_ACTION_TYPE_SET_PBB_ISID = 34;
    PIPELINE_ACTION_TYPE_SET_TUNNEL_ID = 35;
    PIPELINE_ACTION_TYPE_COPY_TTL_OUT = 36;
    PIPELINE_ACTION_TYPE_COPY_TTL_IN = 37;
    PIPELINE_ACTION_TYPE_SET_MPLS_TTL = 38;
    PIPELINE_ACTION_TYPE_DEC_MPLS_TTL = 39;
    PIPELINE_ACTION_TYPE_SET_QUEUE = 40;
    PIPELINE_ACTION_TYPE_SET_NW_TTL = 41;
    PIPELINE_ACTION_TYPE_DEC_NW_TTL = 42;
    PIPELINE_ACTION_TYPE_SET_PBB_UCA = 43;
    PIPELINE_ACTION_TYPE_SET_UDP_PAYLOAD = 44;
    PIPELINE_ACTION_TYPE_SET_IP_PAYLOAD = 45;
    PIPELINE_ACTION_TYPE_PUSH_PBB = 46;
    PIPELINE_ACTION_TYPE_POP_PBB = 47;
    PIPELINE_ACTION_TYPE_PUSH_VLAN = 48;
    PIPELINE_ACTION_TYPE_POP_VLAN = 49;
    PIPELINE_ACTION_TYPE_PUSH_MPLS = 50;
    PIPELINE_ACTION_TYPE_POP_MPLS = 51;
    PIPELINE_ACTION_TYPE_PUSH_L2GRE = 52;
    PIPELINE_ACTION_TYPE_POP_L2GRE = 53;
    PIPELINE_ACTION_TYPE_PUSH_VXLAN = 54;
    PIPELINE_ACTION_TYPE_POP_VXLAN = 55;
    PIPELINE_ACTION_TYPE_PUSH_L2MPLS = 56;
    PIPELINE_ACTION_TYPE_POP_L2MPLS = 57;
    PIPELINE_ACTION_TYPE_SET_BFD = 58;
    PIPELINE_ACTION_TYPE_SET_OUTPUT_PORT = 59;
    PIPELINE_ACTION_TYPE_SET_OUTPUT_CONTROLLER = 60;
    PIPELINE_ACTION_TYPE_SET_OUTPUT_INPORT = 61;
    PIPELINE_ACTION_TYPE_SET_OUTPUT_ALL = 62;
    PIPELINE_ACTION_TYPE_SET_OUTPUT_LAG = 63;
    PIPELINE_ACTION_TYPE_SET_OUTPUT_GROUP = 64;
    PIPELINE_ACTION_TYPE_SET_OUTPUT_TABLE = 65;
    PIPELINE_ACTION_TYPE_SET_OUTPUT_LOCAL = 66;
    PIPELINE_ACTION_TYPE_SET_OUTPUT_PORT_BITMAP = 67;
    PIPELINE_ACTION_TYPE_PUSH_GTP = 68;
    PIPELINE_ACTION_TYPE_POP_GTP = 69;
    PIPELINE_ACTION_TYPE_COPY_FIELD = 70;
    PIPELINE_ACTION_TYPE_HASH_FIELDS = 71;
    PIPELINE_ACTION_TYPE_SET_CLASS = 72;
    PIPELINE_ACTION_TYPE_SET_OUTPUT_QOS = 73;
    PIPELINE_ACTION_TYPE_SWAP_FIELD = 74;
    PIPELINE_ACTION_TYPE_APPEND_RXHWTIMESTAMP = 75;
    PIPELINE_ACTION_TYPE_PUSH_PPPOE = 76;
    PIPELINE_ACTION_TYPE_POP_PPPOE = 77;
    PIPELINE_ACTION_TYPE_PUSH_L2TP = 78;
    PIPELINE_ACTION_TYPE_POP_L2TP = 79;
    PIPELINE_ACTION_TYPE_PUSH_STT = 80;
    PIPELINE_ACTION_TYPE_POP_STT = 81;
    PIPELINE_ACTION_TYPE_SET_FIELD_GENERIC = 82;
    PIPELINE_ACTION_TYPE_TRIM_PACKET = 83;
    PIPELINE_ACTION_TYPE_WRITE_METADATA = 84;
    PIPELINE_ACTION_TYPE_GOTO_TABLE = 85;
    PIPELINE_ACTION_TYPE_METER = 86;
    PIPELINE_ACTION_TYPE_RESERVED = 99;
}

enum PipelineSetFieldActionType {
    PIPELINE_SETFIELD_ACTION_TYPE_RESERVED = 0;
    PIPELINE_SETFIELD_ACTION_TYPE_ARP_OP = 1;
    PIPELINE_SETFIELD_ACTION_TYPE_ARP_SHA = 2;
    PIPELINE_SETFIELD_ACTION_TYPE_ARP_SPA = 3;
    PIPELINE_SETFIELD_ACTION_TYPE_ARP_THA = 4;
    PIPELINE_SETFIELD_ACTION_TYPE_ARP_TPA = 5;
    PIPELINE_SETFIELD_ACTION_TYPE_ETH_DST = 6;
    PIPELINE_SETFIELD_ACTION_TYPE_ETH_SRC = 7;
    PIPELINE_SETFIELD_ACTION_TYPE_ETH_TYPE = 8;
    PIPELINE_SETFIELD_ACTION_TYPE_ICMPV4_CODE = 9;
    PIPELINE_SETFIELD_ACTION_TYPE_ICMPV4_TYPE = 10;
    PIPELINE_SETFIELD_ACTION_TYPE_ICMPV6_CODE = 11;
    PIPELINE_SETFIELD_ACTION_TYPE_ICMPV6_TYPE = 12;
    PIPELINE_SETFIELD_ACTION_TYPE_IP_DSCP = 13;
    PIPELINE_SETFIELD_ACTION_TYPE_IP_ECN = 14;
    PIPELINE_SETFIELD_ACTION_TYPE_IP_PROTO = 15;
    PIPELINE_SETFIELD_ACTION_TYPE_IPV4_DST = 16;
    PIPELINE_SETFIELD_ACTION_TYPE_IPV4_SRC = 17;
    PIPELINE_SETFIELD_ACTION_TYPE_IPV6_DST = 18;
    PIPELINE_SETFIELD_ACTION_TYPE_IPV6_FLABEL = 19;
    PIPELINE_SETFIELD_ACTION_TYPE_IPV6_ND_SLL = 20;
    PIPELINE_SETFIELD_ACTION_TYPE_IPV6_ND_TARGET = 21;
    PIPELINE_SETFIELD_ACTION_TYPE_IPV6_ND_TLL = 22;
    PIPELINE_SETFIELD_ACTION_TYPE_IPV6_SRC = 23;
    PIPELINE_SETFIELD_ACTION_TYPE_MPLS_BOS = 24;
    PIPELINE_SETFIELD_ACTION_TYPE_MPLS_LABEL = 25;
    PIPELINE_SETFIELD_ACTION_TYPE_MPLS_TC = 26;
    PIPELINE_SETFIELD_ACTION_TYPE_PBB_ISID = 27;
    PIPELINE_SETFIELD_ACTION_TYPE_PBB_UCA = 28;
    PIPELINE_SETFIELD_ACTION_TYPE_SCTP_DST = 29;
    PIPELINE_SETFIELD_ACTION_TYPE_SCTP_SRC = 30;
    PIPELINE_SETFIELD_ACTION_TYPE_TCP_DST = 31;
    PIPELINE_SETFIELD_ACTION_TYPE_TCP_SRC = 32;
    PIPELINE_SETFIELD_ACTION_TYPE_UDP_DST = 33;
    PIPELINE_SETFIELD_ACTION_TYPE_UDP_SRC = 34;
    PIPELINE_SETFIELD_ACTION_TYPE_VLAN_PCP = 35;
    PIPELINE_SETFIELD_ACTION_TYPE_VLAN_VID = 36;
}

enum PipelineFactorType {
    PIPELINE_FACTOR_TYPE_RESERVED = 0;
    PIPELINE_FACTOR_TYPE_X1 = 1;
    PIPELINE_FACTOR_TYPE_X2 = 2;
    PIPELINE_FACTOR_TYPE_X3 = 3;
    PIPELINE_FACTOR_TYPE_X4 = 4;
    PIPELINE_FACTOR_TYPE_X5 = 5;
    PIPELINE_FACTOR_TYPE_X6 = 6;
    PIPELINE_FACTOR_TYPE_X7 = 7;
    PIPELINE_FACTOR_TYPE_X8 = 8;
    PIPELINE_FACTOR_TYPE_X9 = 9;
    PIPELINE_FACTOR_TYPE_X10 = 10;
    PIPELINE_FACTOR_TYPE_X11 = 11;
    PIPELINE_FACTOR_TYPE_X12 = 12;
    PIPELINE_FACTOR_TYPE_X13 = 13;
    PIPELINE_FACTOR_TYPE_X14 = 14;
    PIPELINE_FACTOR_TYPE_X15 = 15;
    PIPELINE_FACTOR_TYPE_X16 = 16;
}

enum PipelineDelOptionType {
    PIPELINE_DEL_OPTION_TYPE_RESERVED = 0;
    PIPELINE_DEL_OPTION_TYPE_ALL = 1;
    PIPELINE_DEL_OPTION_TYPE_HASHMATCHFIELDS = 2;
    PIPELINE_DEL_OPTION_TYPE_ACTIONS = 3;
    PIPELINE_DEL_OPTION_TYPE_COPYFIELD = 4;
    PIPELINE_DEL_OPTION_TYPE_SWAPFIELD = 5;
    PIPELINE_DEL_OPTION_TYPE_HASHFIELDS = 6;
}

enum MeterProfileUnitType {
    METER_PROFILE_UNIT_TYPE_RESERVED = 0;
    METER_PROFILE_UNIT_TYPE_KBPS = 1;
    METER_PROFILE_UNIT_TYPE_PKTPS = 2;
}

enum LogicalPortType {
    LOGICAL_PORT_TYPE_RESERVED = 0;
    LOGICAL_PORT_TYPE_LAG = 1;
    LOGICAL_PORT_TYPE_BFD = 2;
}

enum LfaType {
    LFA_TYPE_RESERVED = 0;
    LFA_TYPE_MACSRC = 1;
    LFA_TYPE_MACDST = 2;
    LFA_TYPE_MACSRCDST = 3;
    LFA_TYPE_IPSRC = 4;
    LFA_TYPE_IPDST = 5;
    LFA_TYPE_IPSRCDST = 6;
    LFA_TYPE_DISABLED = 7;
}


enum MeterFlagsType {
    METER_FLAG_TYPE_RESERVED = 0;
    METER_FLAG_TYPE_KBPS = 1;
    METER_FLAG_TYPE_MBPS = 2;
    METER_FLAG_TYPE_PKTPS = 3;
    METER_FLAG_TYPE_BURST = 4;
    METER_FLAG_TYPE_STATS = 5;
}

enum MeterBandType {
    METER_BAND_TYPE_RESERVED = 0;
    METER_BAND_TYPE_DROP = 1;
    METER_BAND_TYPE_DSCPREMARK = 2;
}

enum DeviceProtocolType {
    DEVICE_PROTOCOL_TYPE_RESERVED = 0;
    DEVICE_PROTOCOL_TYPE_SSH = 1;
    DEVICE_PROTOCOL_TYPE_OF = 2;
}

enum NetipaddrScopeType {
    NETIPADDR_SCOPE_TYPE_RESERVED = 0;
    NETIPADDR_SCOPE_TYPE_GLOBAL = 1;
    NETIPADDR_SCOPE_TYPE_LINK = 2;
}

enum CookieType {
    COOKIE_TYPE_RESERVED = 0;
    COOKIE_TYPE_USERDEFINED = 1;
    COOKIE_TYPE_CONTROLLERDEFINED = 2;
}

enum AclProtocolType {
    ACL_PROTOCOL_TYPE_RESERVED = 0;
    ACL_PROTOCOL_TYPE_SSH = 1;
    ACL_PROTOCOL_TYPE_GRPC = 2;
    ACL_PROTOCOL_TYPE_NETCONF = 3; // OBSOLETE
    ACL_PROTOCOL_TYPE_ALL = 4;
}

enum AclTargetType {
    ACL_TARGET_TYPE_RESERVED = 0;
    ACL_TARGET_TYPE_ACCEPT = 1;
    ACL_TARGET_TYPE_REJECT = 2;
    ACL_TARGET_TYPE_DROP = 3;
    ACL_TARGET_TYPE_ALL = 4;
}

// Messages
message Flow {
    oneof FlowOneOf {
        uint32 tableid = 1;
        ReservedIds reservedid = 2;
    }
    YesNo strict = 3; // either strict or haspriority must be set to yes for priority to be considered
    repeated ExpMatchFieldType expmatchfields = 4; // size must be the same as expvaluesmasks
    repeated MatchFieldType matchfields = 5; // size must be the same as valuesmasks
    repeated uint64 expvaluesmasks = 6; // size must be the same as expmatchfields
    repeated uint64 valuesmasks = 7; // size must be the same as matchfields

    uint64 cookie = 8;
    YesNo hascookie = 9; // must be set to yes for value of cookie to be considered
    uint64 cookiemask = 10;
    YesNo hascookiemask = 11; // mmust be set to yes for the value of cookie mask to be considered
    uint32 outgroup = 12;
    YesNo hasoutgroup = 13; // must be set to yes for outgroup to be considered
    uint32 outport = 14;
    YesNo hasoutport = 15; // must be set to yes for outport to be considered

    uint32 priority = 16;
    YesNo haspriority = 17; // either strict or haspriority must be set to yes for priority to be considered
}

message FlowId {
    int32 tableid = 1; // must be >= 0
    int32 flowid = 2;
}

message Group {
    oneof GroupOneOf {
        uint32 groupid = 1;
        ReservedIds reservedid = 2;
    }
}

message Bfd {
    oneof BfdOneOf {
        uint32 discriminator = 1;
        ReservedIds reservedid = 2;
    }
}

message ShowTable {
    oneof ShowTableOneOf {
        uint32 tableid = 1;
        ReservedIds reservedid = 2;
    }
}

message ShowPacketInOutStats {
    // empty
}

message ShowGroupStats {
    oneof ShowGroupStatsOneOf {
        uint32 groupid = 1;
        ReservedIds reservedid = 2;
    }
}

message ShowClassStats {
    oneof ShowClassStatsOneOf {
        uint32 classno = 1;
        ReservedIds reservedid = 2;
    }
}
message ShowFlowStats {
    oneof ShowFlowStatsOneOf {
        uint32 tableid = 1;
        ReservedIds reservedid = 2;
    }
}

message ShowMeterStats {
    oneof ShowMeterStatsOneOf {
        uint32 meterid = 1;
        ReservedIds reservedid = 2;
    }
}

message ShowLogicalPortStats {
    oneof ShowLogicalPortStatsOneOf {
        uint32 logicalportno = 1;
        ReservedIds reservedid = 2;
    }
}

message ShowPortStats {
    oneof ShowPortStatsOneOf {
        uint32 portno = 1;
        ReservedIds reservedid = 2;
    }
}

message ShowTableStats {
    oneof ShowTableStatsOneOf {
        uint32 tableid = 1;
        ReservedIds reservedid = 2;
    }
}

message TableStats {
    uint32 tableid = 1;
    uint64 activecount = 2;
    uint32 tablesize = 3;
    uint64 lookupcount = 4;
    uint64 matchedcount = 5;
    uint32 reply_status = 6;
}

message LogicalPortStats {
    uint32 logicalportno = 1;
    LogicalPortType logicalporttype = 2;
    uint64 tx_packets = 3;
    uint64 tx_bytes = 4;
    uint32 duration_sec = 5;
    uint32 reply_status = 6;
}

message PortStats {
    uint32 portno = 1;
    uint32 rx_packets = 2;
    uint32 rx_bytes = 3;
    uint32 rx_dropped = 4;
    uint32 rx_errors = 5;
    uint32 rx_frame_err = 6;
    uint32 tx_packets = 7;
    uint32 tx_bytes = 8;
    uint32 tx_dropped = 9;
    uint32 tx_errors = 10;
    uint32 reply_status = 11;
}

message MeterBandStats {
    uint64 packet_band_count = 1;
    uint64 byte_band_count = 2;
}

message MeterStats {
    uint32 meterid = 1;
    uint32 flow_count = 2;
    uint64 packet_in_count = 3;
    uint64 byte_in_count = 4;
    uint32 duration_sec = 5;
    uint32 duration_nsec = 6;
    repeated MeterBandStats band_stats = 7;
    uint32 reply_status = 8;
}

message ClassQueueStats {
    uint32 queueid = 1;
    uint64 tx_packets = 2;
    uint64 tx_bytes = 3;
    uint64 throughput_packets = 4;
    uint64 throughput_bytes = 5;
    uint64 drop_packets = 6;
    uint64 drop_bytes = 7;
}

message ClassStats {
    uint32 classno = 1;
    uint64 total_tx_packets = 2;
    uint64 total_tx_bytes = 3;
    uint64 total_throughput_packets = 4;
    uint64 total_throughput_bytes = 5;
    uint64 total_drop_packets = 6;
    uint64 total_drop_bytes = 7;
    repeated ClassQueueStats queue_stats = 8;
    uint32 reply_status = 9;
}

message PacketInOutStats {
    uint64 packet_in_total_packets = 1;
    uint64 packet_in_total_packets_dataplane = 2;
    uint64 packet_in_no_match_packets = 3;
    uint64 packet_in_apply_action_packets = 4;
    uint64 packet_in_invalid_ttl_packets = 5;
    uint64 packet_in_action_set_packets = 6;
    uint64 packet_in_group_packets = 7;
    uint64 packet_in_packet_out_packets = 8;
    uint64 packet_out_total_packets_dataplane = 9;
    uint64 packet_out_total_packets_host = 10;
    YesNo packet_out_eth0_interface_up = 11;
    uint32 reply_status = 12;
}

message GroupBucketStats {
    uint32 bucketno = 1;
    uint64 packet_count = 2;
    uint64 byte_count = 3;
}

message GroupStats {
    uint32 groupid = 1;
    uint32 ref_count = 2;
    uint64 packet_count = 3;
    uint64 byte_count = 4;
    uint32 duration_sec = 5;
    uint32 duration_nsec = 6;
    repeated GroupBucketStats bucket_stats = 7;
    uint32 reply_status = 8;
}

message ExpMatchField {
    ExpMatchFieldType expmatchfield = 1;
    uint32 size = 2;
    uint32 offset = 3;
}

enum EvictionFlagType {
    EVICTION_FLAG_TYPE_RESERVED = 0;
    EVICTION_FLAG_TYPE_OTHERS = 1;
    EVICTION_FLAG_TYPE_IMPORTANCE = 2;
    EVICTION_FLAG_TYPE_LIFETIME = 3;
}

message Table {
    // elements 1 to 4 can be used for set operation.
    //elements 1 2 3 5 6 7 8 are used for show
    uint32 tableid = 1;

    // to handle matchfields [0-41] expmatchfields [1-14] as defined in OpenFlow specifications.
    // set config table tableid <0-254> expmatchfields <1-14> matchfields <0-41> in cli

    repeated ExpMatchFieldType expmatchfields = 2;
    repeated MatchFieldType matchfields = 3;

    // to configure eth_payload, ip_payload, udp_payload and mpls_payload
    ExpMatchField expmatchconfigure = 4;

    repeated ExpMatchField expmatchconfiguration = 5; //[udp, ip, mpls, eth]

    string name = 6;

    uint64 metadata_match = 7;
    uint64 metadata_write = 8;

    int32 active_entries = 9;
    int32 max_entries = 10;

    YesNo eviction_on = 11;
    repeated EvictionFlagType eviction_flags = 12;

    YesNo vacancy_on = 13;
    int32 current_vacancy = 14;
    int32 vacancy_down = 15;
    int32 vacancy_up = 16;

    uint32 reply_status = 17;
}


message CliReply {
    uint32 reply_status = 1; // != 0 when an error occurs
    // It's included in all messages which can be used in replies coming from the switch
}

message Controller {
    string controllergroup = 1;
    string controllerid = 2;
    uint32 priority = 3; // Used as auxpriority when using SetConfigAuxiliary
    string ipaddr = 4;
    uint32 port = 5;
    SecurityType security = 6;
    OfVersion version = 7; // optional (default: ANY)
    OnOff inband = 8; // optional (default: OFF)
    uint32 auxiliaryid = 9; // Considered only in SetConfigAuxiliary, where it must be != 0
    uint32 con_status = 10;
    uint32 inbandport = 11;
    int32 reply_status = 12;
}

message ShowSecurity {
    // empty
}

message Security {
    string profile = 1;
    string type = 2; // only tls is acceptable here, using string because it's planned to have it configurable by user
    string certificates = 3;
    SecurityModuleType module = 4;
    int32 reply_status = 5;
}

message Dns {
    string server1 = 1;
    string server2 = 2;
    int32 reply_status = 3;
}

message ShowDns {
    // empty
}

message OfServer {
    uint32 port = 1; // switch returns 0 when ofserver is not enabled
    int32 reply_status = 2;
}

message OfClient {
    string ipaddr = 1;
    uint32 port = 2;
    int32 reply_status = 3;
}

message Ntp {
    OnOff status = 1; // used only in SetConfigNtpStatus
    string server1 = 2; // used only in SetConfigNtpServer
    string server2 = 3; // used only in SetConfigNtpServer
    int32 reply_status = 4;
}

message AaaServer {
    string ipaddr = 1;
    string password = 2;
    AaaType type = 3;
    int32 reply_status = 4;
}

message Acl {
    string ipaddr = 1;
    string netmask = 2;
    repeated AclProtocolType protocols = 3;
    AclTargetType type = 4;
    uint32 rank = 5;
    int32 reply_status = 6;
}

message Snmp {
    SnmpType type = 1;
    string ipaddr = 2;
    SnmpVersion version = 3;
    string community = 4;
    string username = 5;
    string remoteengineid = 6;
    SnmpAuth auth = 7;
    SnmpPriv priv = 8;
    string password = 9;
    YesNo deleteall = 10;
    int32 reply_status = 11;
}

message SnmpHost {
    SnmpType type = 1;
    string ipaddr = 2;
    SnmpVersion version = 3;
    string security_name = 4;
    string remoteengineid = 5;
}

message SnmpUser {
    string username = 1;
    SnmpAuth auth = 2;
    SnmpPriv priv = 3;
}

message ShowSnmp {
    repeated SnmpHost hosts = 1;
    repeated SnmpUser users = 2;
    int32 reply_status = 3;
}

message RemoteCfgServer {
    string ipaddr = 1;
    string username = 2;
    string password = 3;
    uint32 interval = 4;
    string path = 5;
    int32 reply_status = 6;
}

message ShowRemoteCfgServer {
    // empty
}

message RemoteLogServer {
    string ipaddr = 1;
    uint32 port = 2;
    int32 reply_status = 3;
}

message Cookie {
    uint64 tablemiss = 1;
    uint64 mirror = 2;
    uint64 controller = 3;
    CookieType type = 4; // only used in ShowConfigCookie reply from switch
    int32 reply_status = 5;
}

message ShowOfClient {
    // empty
}

message ShowOfServer {
    // empty
}

message ShowAaaServer {
    // empty
}

message ShowAcl {
    // empty
}

message ShowRemoteLogServer {
    // empty
}

message ShowCookie {
    // empty
}

message LogicalPort {
    LogicalPortType logicalporttype = 1;
    uint32 logicalportno = 2;
    repeated uint32 portno = 3;
    LfaType lfa = 4;
    string name = 5;
    repeated uint32 weights = 6;
    int32 liveness_threshold = 7;
    int32 reply_status = 8;
}

message StatusSwitchEthLink {
    string name = 1;
    string status = 2;
}

message StatusSwitchBuild {
    string name = 1;
    string ope_version_hash = 2;
    string ppe_version_hash = 3;
    string ez_driver_version = 4;
}

message StatusSwitch {
    string serial_number = 1;
    string kernel = 2;
    string uptime = 3;
    float cpu_percentage = 4;
    int64 mem_usage = 5;
    int64 ssd_usage = 6;
    repeated StatusSwitchEthLink eth_links = 7;
    repeated StatusSwitchBuild builds = 8;
    int32 reply_status = 9;
}

message RebootShutdown {
    SaveType save = 1;
}

message SaveConfigParameters {
    SaveConfigType save = 1;
}

message Meter {
    uint32 meterid = 1;
    repeated MeterFlagsType flags = 2;
    repeated MeterBand bands = 3;
    int32 reply_status = 4;
}

message MeterBand {
    MeterBandType type = 1;
    uint32 rate = 2;
    uint32 burstsize = 3;
    uint32 preclevel = 4;
}

message MeterGroup {
    uint32 metergroup = 1;
    uint32 maxbands = 2;
    int32 reply_status = 3;
}

message MeterProfile {
    uint32 profileid = 1;
    MeterProfileUnitType unit = 2;
    uint32 rate = 3;
    uint32 burstsize = 4;
    uint32 usecount = 5;
    YesNo persistent = 6;
    int32 reply_status = 7;
}

message DeviceIpaddr {
    string device = 1; // Device name: of, of1, of2, cli, mgt, inband
    string ipaddr = 2;
    string netmask = 3;
    repeated DeviceProtocolType protocols = 4;
    int32 reply_status = 5;
}

message DeviceNetipaddr {
    string device = 1; // Device name: of, of1, of2, cli, mgt, inband
    string netipaddr = 2;
    string netmask = 3;
    string gateway = 4;
    NetipaddrScopeType scope = 5;
    int32 reply_status = 6;
}

message DeviceDhcp {
    string device = 1;
    OnOff status = 2;
    int32 reply_status = 3;
}

message DeviceVlanIpaddr {
    string device = 1; // Device name: of, of1, of2, cli
    uint32 vlan = 2;
    string ipaddr = 3;
    string netmask = 4;
    //repeated DeviceProtocolType protocols = 5;  // We currently don't support VLAN on Inband interface
    int32 reply_status = 6;
}

message DeviceVlanNetipaddr {
    string device = 1; // Device name: of, of1, of2, cli, mgt, inband
    uint32 vlan = 2;
    string netipaddr = 3;
    string netmask = 4;
    string gateway = 5;
    NetipaddrScopeType scope = 6;
    int32 reply_status = 7;
}

message DateTime {
    // One or more of the following
    string date = 1; // DD[/MM/[YYYY]]
    string time = 2; // HH[:MM[:SS]]
    string timezone = 3; // UTC+/-HH[:MM]
    int32 reply_status = 4;
}

message Hostname {
    string hostname = 1;
    int32 reply_status = 2;
}

message Misssendlen {
    uint32 misssendlen = 1;
    int32 reply_status = 2;
}

message Dpid {
    string dpid = 1;
    int32 reply_status = 2;
}

message Echo {
    uint32 echo = 1;
    int32 reply_status = 2;
}

message Tcpbuffer {
    // One or both can be accepted, and they be in 2's power, between 2 and 8192 (KB) included
    uint32 tcpbufferin = 1;
    uint32 tcpbufferout = 2;
    int32 reply_status = 3;
}

message Ida {
    // Supported only on NS1000 series
    enum IdaType {
        IDA_TYPE_RESERVED = 0;
        IDA_TYPE_INPORT = 1;
        IDA_TYPE_MACSRCDST = 2;
        IDA_TYPE_IPSRCDST = 3;
    }
    IdaType ida = 1;
    int32 reply_status = 2;
}

message DeviceIpconfig {
    string name = 1;
    string ipaddr = 2;
    string netmask = 3;
    string macaddr = 4;
    string gateway = 5;
}

message DeviceRoute {
    string destination = 1;
    string gateway = 2;
    string mask = 3;
    NetipaddrScopeType scope = 4;
    string device = 5;
}

message SwitchConfigAll {
    string hostname = 1;
    repeated DeviceIpconfig device = 2;
    repeated DeviceRoute route = 3;
    repeated DeviceDhcp dhcp = 4;
    OnOff ntp_status = 5;
    DateTime date = 6;
    Tcpbuffer tcpbuffers = 7;
    int32 reply_status = 8;
}

message SwitchDateTime {
    // One or more of the following
    string date = 1; // DD[/MM/[YYYY]]
    string time = 2; // HH[:MM[:SS]]
    string timezone = 3; // UTC+/-HH[:MM]
    int32 reply_status = 4;
}

message SwitchHostname {
    string hostname = 1;
    int32 reply_status = 2;
}

message SwitchSessionIdleTimeout {
    uint32 timeout = 1;
    int32 reply_status = 2;
}

message LogMessages {
    OnOff status = 1;
}

message LogOferrors {
    OnOff status = 1;
}

enum PortSpeed {
    PORT_SPEED_RESERVED = 0;
    PORT_SPEED_10MBFD = 1;
    PORT_SPEED_100MBFD = 2;
    PORT_SPEED_1GBFD = 3;
    PORT_SPEED_10GBFD = 4;
    PORT_SPEED_40GBFD = 5;
    PORT_SPEED_100GBFD = 6;
}

enum PortMode {
    PORT_MODE_RESERVED = 0;
    PORT_MODE_SGMII = 1;
    PORT_MODE_XFI = 2;
}

enum PortPause {
    PORT_PAUSE_RESERVED = 0;
    PORT_PAUSE_OFF = 1;
    PORT_PAUSE_ON = 2;
    PORT_PAUSE_RX = 3;
    PORT_PAUSE_TX = 4;
}

message PortConfig {
    uint32 portno = 1;
    PortSpeed speed = 2;
    OnOff autoneg = 3;
    OnOff nopacketin = 4;
    OnOff portdown = 5;
    OnOff trunk = 6;
    PortMode mode = 7;
    PortPause pause = 8;
    uint32 queueid = 9;
    uint32 minrate = 10;
    uint32 maxrate = 11;
    uint32 weight = 12;
    uint32 nativevid = 13;
}

message UserInfo {
    User type = 1;
    string username = 2;
    string password = 3;
    UserGroupType group = 4;
    uint32 reply_status = 5;
}

message PipelineTable {
    int32 tableid = 1;
    int32 tablesize = 2;
    int32 tablewidth = 3;
    PipelineTableType tabletype = 4;
    YesNo candidate = 5;
    uint32 reply_status = 6;
}

message PipelineTableMatchfields {
    int32 tableid = 1;
    repeated MatchFieldType matchfields = 2;
}

message PipelineTableInfo {
    int32 tableid = 1;
    int32 maxentries = 2;
    PipelineTableType tabletype = 3;
    repeated MatchFieldType matchfields = 4;
}

message PipelineTablesizes {
    repeated int32 sizes = 1;
    repeated int32 widths = 2;
}

message PipelineGroups {
    int32 groupsnumber = 1;
}

message PipelineGroupStats {
    PipelineUnitType unittype = 1;
}

message PipelineMeters {
    int32 metersnumber = 1;
    PipelineUnitType unittype = 2;
}

message PipelineMeterStats {
    PipelineUnitType unittype = 1;
}

message PipelineHashAlgorithm {
    PipelineHashAlgorithmType algorithmtype = 1;
}

message PipelineActions {
    repeated PipelineActionType actiontypes = 1;
}

message PipelineActionsSetField {
    PipelineSetFieldActionType setactiontype = 1;
}

message PipelineProfileData {
    MatchFieldType srcfield = 1;
    MatchFieldType dstfield = 2;
}

message PipelineCopyProfile {
    PipelineProfileData profile = 1;
}

message PipelineSwapProfile {
    PipelineProfileData profile = 1;
}

message PipelineHashProfileData {
    repeated MatchFieldType matchfields = 1;
    MatchFieldType destfield = 2;
    PipelineHashAlgorithmType algorithmtype = 3;
}

message PipelineHashProfile {
    PipelineHashProfileData profile = 1;
}

message PipelineHashMatchFields {
    repeated MatchFieldType matchfields = 1;
}

message PipelineActionChains {
    int32 tablesize = 1;
}

message PipelineActionChainsFactor {
    PipelineFactorType factortype = 1;
}

message PipelineApply {
    YesNo reboot = 1;
    SaveType save = 2;
    string saveprofile = 3;
}

message PipelineLoadProfile {
    string profile = 1;
}

message PipelineDefault {
    YesNo reboot = 1;
    SaveType save = 2;
}

message PipelineDelOption {
    PipelineDelOptionType option = 1;
}

message PipelineConfig {
    repeated PipelineTableInfo tables = 1;
    uint32 actionchains_table_size = 2;
    uint32 table_group_size = 3;
    uint32 table_meters_size = 4;
    PipelineUnitType table_group_stats_type = 5;
    PipelineUnitType table_meters_stats_type = 6;
    uint32 meter_band_num = 7;
    PipelineMeterUnitType meter_unit = 8;
    uint32 meter_counter_size = 9;
    PipelineHashAlgorithmType hash_algorithm = 10;
    repeated PipelineActionType actions = 11;
    repeated MatchFieldType hash_matchfields = 12;
    repeated ExpMatchField exp_matchfields = 13;
    repeated PipelineProfileData copyfield_profiles = 14;
    repeated PipelineProfileData swapfield_profiles = 15;
    repeated PipelineHashProfileData hashfields_profiles = 16;
}

message PipelineInfo {
    PipelineConfig current_config = 1;
    PipelineConfig candidate_config = 2;
    uint32 reply_status = 3;
}

enum ColorPriority {
    COLOR_PRIORITY_RESERVED = 0;
    COLOR_PRIORITY_0 = 1;
    COLOR_PRIORITY_1 = 2;
    COLOR_PRIORITY_2 = 3;
    COLOR_PRIORITY_3 = 4;
    COLOR_PRIORITY_NOTRANSMIT = 5;
}

message Class {
    uint32 classno = 1;
    uint32 classprofileid = 2;
    uint32 subportno = 3;
    uint32 reply_status = 4;
}

message ClassNotDefined {
    uint32 num_undefined = 1;
    uint32 subportno = 2;
    uint32 serviceprofileid = 3;
    uint32 reply_status = 4;
}

message ClassProfile {
    uint32 classprofileid = 1;
    uint32 serviceprofileid = 2;
    int32 shaperrate = 3;
    int32 classmaxrate = 4;
    uint32 queueid = 5;
    int32 queuemaxrate = 6;
    int32 queueburstsize = 7;
}

message ClassProfileQueue {
    uint32 queueid = 1;
    int32 queuemaxrate = 2;
    int32 queueburstsize = 3;
}

message ShowClassProfile {
    uint32 classprofileid = 1;
    uint32 serviceprofileid = 2;
    int32 shaperrate = 3;
    int32 classmaxrate = 4;
    repeated ClassProfileQueue queues = 5;
    uint32 reply_status = 6;
}

message ServiceProfile {
    uint32 serviceprofileid = 1;
    uint32 weight_priority_1 = 2;
    uint32 weight_priority_2 = 3;
    uint32 weight_priority_3 = 4;
    uint32 queueid = 5;
    ColorPriority greenpriority = 6;
    ColorPriority yellowpriority = 7;
    ColorPriority redpriority = 8;
    repeated uint32 shaperqueues = 9;
}

message ServiceProfileQueue {
    uint32 queueid = 1;
    YesNo commit_shaper = 2;
    ColorPriority greenpriority = 3;
    ColorPriority yellowpriority = 4;
    ColorPriority redpriority = 5;
}

message ShowServiceProfile {
    uint32 serviceprofileid = 1;
    uint32 weight_priority_1 = 2;
    uint32 weight_priority_2 = 3;
    uint32 weight_priority_3 = 4;
    repeated ServiceProfileQueue queues = 5;
    uint32 reply_status = 6;
}

message Subport {
    uint32 subportno = 1;
    uint32 portno = 2;
    int32 subportcommitrate = 3;
    int32 subportmaxrate = 4;
    uint32 reply_status = 5;
}

message SubportNotDefined {
    uint32 num_undefined = 1;
    uint32 portno = 2;
    uint32 reply_status = 3;
}

message AuthenticateUser {
    string username = 1;
    string password = 2;
};

enum PtpStatus {
    PTP_STATUS_RESERVED = 0;
    PTP_STATUS_ACTIVE = 1;
    PTP_STATUS_INACTIVE = 2;
}

message Ptp {
    string device = 1;
    PtpStatus ptp_status = 2;
    uint32 reply_status = 3;
}

message ShowNtp {
    // empty
}

message ShowUser {
    // empty
}

message ShowPipeline {
    // empty
}

message ShowPipelineInfo {
    // empty
}

message ShowMeterProfile {
    // empty
}

message ShowMeterGroup {
    // empty
}

message ShowDateTime {
    // empty
}

message ShowHostname {
    // empty
}

message ShowMisssendlen {
    // empty
}

message ShowDpid {
    // empty
}

message ShowEcho {
    // empty
}

message ShowTcpbuffer {
    // empty
}

message ShowIda {
    // empty
}

message ShowSwitchConfigAll {
    // empty
}

message ShowPtp {
    // empty
}

message License {
    oneof LicenseOneOf {
        string licensefile = 1; // Name of the license file in novisftp/configs
        string licensedata = 2; // Content of the license file
    }
}
