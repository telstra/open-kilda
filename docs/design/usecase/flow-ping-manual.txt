@startuml
title FLOW ping(verification)

participant Client

participant NB

control kilda.northbound
control kilda.flow

participant "FLOW SplitterBolt" as SplitterBolt
participant "FLOW SpeakerBolt" as SpeakerBolt
participant "FLOW CrudBolt" as CrudBolt
participant "FLOW VerificationBolt" as VerificationBolt
participant "FLOW VerificationJointBolt" as VerificationJointBolt
participant "FLOW NorthboundReplyBolt" as NorthboundReplyBolt

control kilda.speaker
participant SPEAKER

control switch.input
control switch.output

control Time

Client -> NB: PUT /flows/{flow_id}/verify\nJSON VerificationInput

activate NB
note right of NB: new FlowVerificationRequest
NB -> kilda.flow: CommandMessage\nFlowVerificationRequest
kilda.flow -> SplitterBolt: CommandMessage\nFlowVerificationRequest
SplitterBolt -> CrudBolt: CommandMessage\nFlowVerificationRequest
note right of CrudBolt: fetch flow from cache
CrudBolt -> VerificationBolt: Flow + FlowVerificationRequest
note right of VerificationBolt: proxy data to be\nable to use field grouping
VerificationBolt -> VerificationJointBolt: Flow + FlowVerificationRequest
activate VerificationJointBolt

loop in (forward, reverse)
    note right of VerificationJointBolt: new "wait record"
    note right of VerificationJointBolt: new UniFlowVerificationRequest
    VerificationJointBolt -> kilda.speaker: CommandMessage\nUniFlowVerificationRequest
    kilda.speaker -> SPEAKER: CommandMessage\nUniFlowVerificationRequest

    activate SPEAKER

    alt output switch is managed by SPEAKER
        note right of SPEAKER: new TimeoutNotification
        SPEAKER -> SPEAKER: subscribe to ping(verification)\nnotifications
    end
    alt input switch is managed by SPEAKER
        note right of SPEAKER: new VerificationData
        note right of SPEAKER: make Ethernet packet\n(with VerificationData as payload)
        SPEAKER -> switch.input: Ethernet\nVerificationData
    end

    switch.input -> switch.output: Ethernet\nVerificationData

    alt normal workflow
        switch.output -> SPEAKER: Ethernet\nVerificationData
        note right of SPEAKER: calc flow latency
        note right of SPEAKER: new UniFlowVerificationResponse
        note right of SPEAKER: unsubscribe from ping(verification) notifications
    else timeout
        Time -> SPEAKER: ping timeout
        note right of SPEAKER: unsubscribe from ping(verification) notifications
        note right of SPEAKER: new UniFlowVerificationResponse\nwith error code TIMEOUT
    end

    SPEAKER -> kilda.flow: InfoMessage\nUniFlowVerificationResponse
    deactivate SPEAKER

    kilda.flow -> SpeakerBolt: InfoMessage\nUniFlowVerificationResponse
    SpeakerBolt -> VerificationBolt: UniFlowVerificationResponse+InfoMessage
    note right of VerificationBolt: proxy data to be\nable to use field grouping
    VerificationBolt -> VerificationJointBolt: flowId+UniFlowVerificationResponse

    note right of VerificationJointBolt: locate wait record
    note right of VerificationJointBolt: save ping(verification) results
    alt have data about both ping directions
        note right of VerificationJointBolt: new FlowVerificationResponse
        VerificationJointBolt -> NorthboundReplyBolt: InfoMessage\nFlowVerificationResponse
    end
end
deactivate VerificationJointBolt

NorthboundReplyBolt -> kilda.northbound: InfoMessage\nFlowVerificationResponse

kilda.northbound -> NB: InfoMessage\nFlowVerificationResponse
note right of NB: convert FlowVerificationResponse into VerificationOutput
NB -> Client: JSON VerificationOutput
deactivate NB

@enduml
