@startuml

title Kilda DAO implementation Neo4j OGM

package "kilda-model" {
    class Flow
    class Switch
}

package "kilda-persistence-api" {
    interface PersistenceManager
    interface TransactionManager
    interface RepositoryFactory
    interface FlowRepository
    interface SwitchRepository

    PersistenceManager ..> TransactionManager : create
    PersistenceManager ..> RepositoryFactory : create

    RepositoryFactory ..> FlowRepository : create
    RepositoryFactory ..> SwitchRepository : create

    FlowRepository ..> Flow
    SwitchRepository ..> Switch
}

package "neo4j-ogm" {
    class SessionFactory
    class Session

    SessionFactory ..> Session : create
}

package "kilda-persistence-neo4j" {
    class Neo4jPersistenceManager
    together {
        class Neo4jTransactionManager {
            ThreadLocal<Session> SESSION_HOLDER
        }
        class Neo4jRepositoryFactory
    }
    interface Neo4jSessionFactory {
        Session getSession()
    }
    class Neo4jFlowRepository
    class Neo4jSwitchRepository

    Neo4jPersistenceManager ..|> PersistenceManager
    Neo4jPersistenceManager *-> Neo4jTransactionManager : create & keep the instance
    Neo4jTransactionManager ..|> TransactionManager
    Neo4jTransactionManager ..|> Neo4jSessionFactory
    Neo4jTransactionManager ..> SessionFactory
    Neo4jRepositoryFactory ..|> RepositoryFactory
    Neo4jSessionFactory ..> Session
    Neo4jFlowRepository ..|> FlowRepository
    Neo4jFlowRepository o-> Neo4jSessionFactory
    Neo4jFlowRepository ..> Session
    Neo4jSwitchRepository ..|> SwitchRepository
    Neo4jSwitchRepository o-> Neo4jSessionFactory
    Neo4jSwitchRepository ..> Session

    Neo4jPersistenceManager ..> Neo4jRepositoryFactory : create
    Neo4jRepositoryFactory ..> Neo4jFlowRepository : create
    Neo4jRepositoryFactory ..> Neo4jSwitchRepository : create
}


@enduml