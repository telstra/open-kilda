@startuml

title Kilda Domain Model

class Switch {
    id : SwitchId

    controller
    hostname
    address
    description

    status : SwitchStatus

    under_maintenance
    __
    unique constraint on switch_id
}

enum SwitchStatus {
    ACTIVE
    INACTIVE
    REMOVED
}

Switch o--> SwitchStatus

enum PortStatus {
    UP
    DOWN
}

class Port {
    switch : Switch
    port_no

    status : PortStatus
    __
    unique constraint on switch_id+port_no
}

Port o--> PortStatus
Port --> Switch

class Isl {
    id = src_switch+src_port+dst_switch+dst_port :  for simplify where clause

    src_switch : Switch
    src_port

    dst_switch : Switch
    dst_port

    cost
    speed
    max_bandwidth
    available_bandwidth

    forward_status: IslStatus
    forward_latency
    forward_available_bandwidth

    reverse_status: IslStatus
    reverse_latency
    reverse_available_bandwidth
    __
    unique constraint on src_switch+src_port+dst_switch+dst_port
}

note "rules for solving whois src and dst\nsrc_switch < dst_switch\n if src_switch == dst_switch use src_port < dst_port" as ISL_id_note
ISL_id_note .. Isl

Isl --> Port : by src and dst endpoints

class IslTemplate {
    src_switch : Switch
    src_port

    dst_switch : Switch
    dst_port

    cost
    max_bandwidth
    __
    unique constraint on src_switch+src_port+dst_switch+dst_port
}

IslTemplate --> Port : by src and dst endpoints

class Flow {
    flow_id

    src_switch : Switch
    src_port
    src_vlan

    dst_switch : Switch
    dst_port
    dst_vlan

    forward : FlowPath
    reverse : FlowPath

    description
    bandwidth
    ignore_bandwidth
    periodic_pings

    encapsulation_type : FlowEncapsulationType

    status : FlowStatus
    __
    unique constraint on flow_id
}

note "rules for solving whois src and dst\nsrc_switch < dst_switch\n if src_switch == dst_switch use src_port < dst_port" as Flow_id_note
Flow_id_note .. Flow

Flow --> Switch
Flow --> FlowPath

enum FlowEncapsulationType {
   TRANSIT_VLAN
}

Flow o--> FlowEncapsulationType

class FlowPath {
    path_id

    src_switch : Switch
    dst_switch : Switch

    flow_id

    cookie
    meter_id

    latency

    bandwidth
    ignore_bandwidth
    min_available_bandwidth

    status : FlowPathStatus
    ==
    pathSegments() : PathSegment[]
    __
    unique constraint on path_id
}

FlowPath --> Switch
FlowPath --> Flow

enum FlowPathStatus {
    IN_PROGRESS
    ACTIVE
    INACTIVE
}
FlowPath o--> FlowPathStatus

enum FlowStatus {
    IN_PROGRESS
    UP
    DOWN
}

Flow o--> FlowStatus

class PathSegment {
    path_id

    src_switch : Switch
    src_port

    dst_switch : Switch
    dst_port

    seq_id

    latency
}

PathSegment --> FlowPath
PathSegment --> Isl : by src and dst endpoints

class FlowMeter {
    switch : Switch

    flow_id
    path_id

    meter_id
    __
    unique constraint on switch_id+meter_id
}

FlowMeter --> Switch
FlowMeter --> Flow
FlowMeter --> FlowPath

class FlowCookie {
    flow_id

    unmasked_cookie
    __
    unique constraint on unmasked_cookie
}

FlowCookie --> Flow

package "Vlan-based Encapsulation" {

    class TransitVlan {
        flow_id
        path_id

        vlan
        __
        unique constraint on path_id
        unique constraint on vlan
    }

    TransitVlan --> FlowPath
    TransitVlan --> Flow
}

@enduml