@startuml
title New implementation of ISL discovery and round-trip latency with NOT NoviFlow switch and with groups support

collections Floodlights as FL
participant Floodlight_B as FL
participant "Switch_A\n(Not Noviflow)" as SWA
participant "Switch_B\n(With/without\ngroups support)" as SWB
control kilda.topo.disco as DI
participant NetworkTopology as NT
database DB
control kilda.isl.latency as LT
participant IslLatencyTopology as ILT
control kilda.otsdb as OTSDB
participant OpenTSDBTopology as OTOP
activate FL
FL -> FL : set current timestemp **T**
FL -> SWA : Discovery Packet
deactivate FL
activate SWA
SWA -> SWB : Discovery Packet
deactivate SWA
activate SWB
SWB -> FL : Discovery Packet (old style)
deactivate SWB
activate FL
FL -> DI : IslInfoData\n(without latency)
DI -> NT : IslInfoData\n(without latency)
activate NT
NT -> DB : Store ISL
deactivate NT
FL -> FL : calculate one way latency \n**curTime - T - controller latency**
FL -> LT : IslOneWayLatency
deactivate FL
LT -> ILT : IslOneWayLatency
activate ILT
ILT -> DB : Set Latency
ILT -> OTSDB : latency metric
deactivate ILT
OTSDB -> OTOP : latency metric

group With group support case:
    activate SWB
    SWB -> SWB : Copy  packet \n(get P1 and P2)
    SWB -> SWB : Change UDP port in P2\n(to match P2 on Switch_A)
    SWB -> SWA : Packet P2
    deactivate SWB
    activate SWA
    SWA ->x SWB : Drop packet P2
    deactivate SWA
end

@enduml
