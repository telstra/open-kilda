# Generated by confd.
# Do not change this file, all changes will be lost. Change corresponding template.

environment.naming.prefix = {{ getv "/kilda_environment_naming_prefix" }}

parallelism.new = {{ getv "/kilda_storm_parallelism_level_new" }}
parallelism = {{ getv "/kilda_storm_parallelism_level" }}
workers = {{ getv "/kilda_storm_parallelism_workers_count" }}

#######
# Storm-specific topology configuration.
#
# Configure timeout milliseconds used for disruptor queue wait strategy. Can be used to tradeoff latency vs. CPU usage.
{{- if exists "/kilda_storm_disruptor_wait_timeout" }}
disruptor.wait.timeout = {{ getv "/kilda_storm_disruptor_wait_timeout" }}
{{- else }}
# disruptor.wait.timeout =
{{- end }}
#
# The maximum age in milliseconds a batch can be before being sent to the next thread.
{{- if exists "/kilda_storm_disruptor_batch_timeout" }}
disruptor.batch.timeout = {{ getv "/kilda_storm_disruptor_batch_timeout" }}
{{- else }}
# disruptor.batch.timeout =
{{- end }}
#
# The amount of milliseconds a spout should sleep when emits no tuples.
{{- if exists "/kilda_storm_spout_wait_sleep_timeout" }}
spout.wait.sleep.time = {{ getv "/kilda_storm_spout_wait_sleep_timeout" }}
{{- else }}
# spout.wait.sleep.time =
{{- end }}

kafka.hosts = {{ getv "/kilda_kafka_hosts" }}
kafka.partitions.default = 1
kafka.replication.default = 3

reroute.throttling.delay.min = {{ getv "/kilda_reroute_throttling_delay_min" }}
reroute.throttling.delay.max = {{ getv "/kilda_reroute_throttling_delay_max" }}

isl.unstable.timeout.sec = {{ getv "/kilda_isl_unstable_timeout_sec" }}

port.up.down.throttling.delay.seconds.min = {{ getv "/kilda_port_up_down_throttling_delay_seconds_min" }}
port.up.down.throttling.delay.seconds.warm.up = {{ getv "/kilda_port_up_down_throttling_delay_seconds_warm_up" }}
port.up.down.throttling.delay.seconds.cool.down = {{ getv "/kilda_port_up_down_throttling_delay_seconds_cool_down" }}
port.antiflap.stats.dumping.interval.seconds = 60

bfd.port.offset = {{ getv "/kilda_bfd_port_offset" }}

opentsdb.hosts = http://{{ getv "/kilda_opentsdb_hosts" }}:{{ getv "/kilda_opentsdb_port" }}
opentsdb.timeout = {{ getv "/kilda_opentsdb_timeout" }}
opentsdb.num.spouts = {{ getv "/kilda_opentsdb_num_spouts" }}
opentsdb.num.opentsdbfilterbolt = {{ getv "/kilda_opentsdb_num_opentsdbfilterbolt" }}
opentsdb.num.opentsdbbolt = {{ getv "/kilda_opentsdb_num_opentsdbbolt" }}
opentsdb.workers.opentsdbolt = {{ getv "/kilda_opentsdb_workers_opentsdbolt" }}
opentsdb.num.datapointparserbolt = {{ getv "/kilda_opentsdb_num_datapointparserbolt" }}
opentsdb.workers.datapointparserbolt = {{ getv "/kilda_opentsdb_workers_datapointparserbolt" }}
opentsdb.batch.size = {{ getv "/kilda_opentsdb_batch_size" }}
opentsdb.flush.interval = {{ getv "/kilda_opentsdb_flush_interval" }}
opentsdb.workers = {{ getv "/kilda_opentsdb_workers" }}
opentsdb.client.chunked-requests.enabled = true
opentsdb.metric.prefix = {{ getv "/kilda_opentsdb_metric_prefix" }}

statistics.interval = {{ getv "/kilda_statistics_interval" }}

neo4j.uri = bolt://{{ getv "/kilda_neo4j_host" }}:{{ getv "/kilda_neo4j_bolt_port" }}
neo4j.user = {{ getv "/kilda_neo4j_user" }}
neo4j.password = {{ getv "/kilda_neo4j_password" }}

logger.level = INFO

#######
# Discovery
# - discovery.generic.interval = how many bolt ticks(1 tick per second) between ISL discovery / health checks, starts from 0
# - discovery.exhausted.interval = how many seconds between sending a discovery packet in case
#   if the endpoint (switch + port) does not belong to ISL
# - discovery.auxiliary.interval = how many seconds between ISL discovery when another mechanism is used
#   to determine ISL state (e.g. BFD)
# - discovery.timeout = at which point do we send an ISL Failure (if it is an ISL)
#       - NB: the number is in "ticks", not "attempts" .. attempts = timeout/interval
# - discovery.limit = at what point do we stop sending? -1 means never ..
# - discovery.speaker-failure-timeout - after this amount of seconds without a
#   message from speaker it will be marked as unavailable
# - discovery.keep.removed.isl - how long should we store/remember in minutes isl endpoints.
#   it is mainly used for defining whether isl is moved or not
discovery.generic.interval = {{ getv "/kilda_discovery_generic_interval" }}
discovery.exhausted.interval = {{ getv "/kilda_discovery_exhausted_interval" }}
discovery.auxiliary.interval = {{ getv "/kilda_discovery_auxiliary_interval" }}
discovery.round.trip.status.interval = {{ getv "/kilda_discovery_round_trip_status_interval" }}
discovery.packet.ttl = {{ getv "/kilda_discovery_packet_ttl" }}
discovery.timeout = {{ getv "/kilda_discovery_timeout" }}
discovery.db.write.repeats.time.frame = {{ getv "/kilda_discovery_db_write_repeats_time_frame" }}

# multi-FL
floodlight.alive.timeout = {{ getv "/kilda_floodlight_alive_timeout" }}
floodlight.alive.interval = {{ getv "/kilda_floodlight_alive_interval" }}
message.blacklist.timeout = {{ getv "/kilda_message_blacklist_timeout" }}
floodlight.regions = {{ getv "/kilda_floodlight_regions" }}

local = no
local.execution.time = 3000

#######
# Path computation engine
pce.network.strategy = {{ getv "/kilda_pce_network_strategy" }}
#######
# cost strategy params
# value added to path weight for each isl used in the same diversity group
pce.diversity.isl.cost = {{ getv "/kilda_diversity_isl_cost" }}
# value added to path weight for each switch used in the same diversity group
pce.diversity.switch.cost = {{ getv "/kilda_diversity_switch_cost" }}
# value added to path weight for each ustable isl
pce.isl.cost.when.unstable = {{ getv "/kilda_isl_cost_when_unstable" }}
# value added to path weight for each isl under maintenance
pce.isl.cost.when.under.maintenance = {{ getv "/kilda_isl_cost_when_under_maintenance" }}
#######
# latency strategy params
# value added to path weight for each isl used in the same diversity group
pce.diversity.isl.latency = {{ getv "/kilda_diversity_isl_latency" }}
# value added to path weight for each switch used in the same diversity group
pce.diversity.switch.latency = {{ getv "/kilda_diversity_switch_latency" }}
# value added to path weight for each ustable isl
pce.isl.latency.when.unstable = {{ getv "/kilda_isl_latency_when_unstable" }}
# value added to path weight for each isl under maintenance
pce.isl.latency.when.under.maintenance = {{ getv "/kilda_isl_latency_when_under_maintenance" }}

burst.coefficient = {{ getv "/kilda_floodlight_flow_meter_burst_coefficient" }}
min.burst.size.in.kbits = 1024

statsrouter.timeout = 100
statsrouter.request.interval = 60

# round trip latency
latency.update.interval = {{ getv "/kilda_latency_update_interval" }}
latency.update.time.range = {{ getv "/kilda_latency_update_time_range" }}
latency.discovery.interval.multiplier = {{ getv "/kilda_latency_discovery_interval_multiplier" }}

# flow(H&S) topology
flow.hub.transaction.retries = 3
flow.path.allocation.retries = 10
flow.path.allocation.retry.delay = 50
flow.create.hub.timeout.seconds = 30
flow.create.speaker.timeout.seconds = 10
flow.create.speaker.command.retries = {{ getv "/kilda_flow_create_command_retries" }}
flow.create.hub.retries = {{ getv "/kilda_flow_create_hub_retries" }}
flow.update.hub.timeout.seconds = 30
flow.update.speaker.timeout.seconds = 10
flow.update.speaker.command.retries = 3
flow.reroute.hub.timeout.seconds = 30
flow.reroute.speaker.timeout.seconds = 10
flow.reroute.speaker.command.retries = 3
flow.delete.hub.timeout.seconds = 30
flow.delete.speaker.timeout.seconds = 10
flow.delete.speaker.command.retries = 3
