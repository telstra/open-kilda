version: '2.1'
services:

#  hello-world:
#    build:
#      context: services
#      dockerfile:  hello-world/Dockerfile
#    image: "kilda/hello-world:${full_build_number:-latest}"
#    command: /app/helloworld.sh
#    env_file:
#      - services/hello-world/variables.env

  mininet:
    container_name: mininet
    image: "kilda/mininet:${full_build_number:-latest}"
    command: /app/startup
    env_file:
      - services/mininet/variables.env
    ports:
      - "38080:38080"
      - "17191:17191"
    links:
      - floodlight:kilda
    privileged: true
    volumes:
      - /lib/modules:/lib/modules


  neo4j:
    container_name: neo4j
    hostname: neo4j.pendev
    image: "kilda/neo4j:${full_build_number:-latest}"
    command: neo4j console
    ports:
      - "7474:7474"
      - "7687:7687"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:7474/"]
      interval: 30s
      timeout: 10s
      retries: 3

##
## Python based topology-engine
##
  topology-engine:
    container_name: topology-engine
    build:
      context: services/topology-engine/
      dockerfile: Dockerfile
    image: "kilda/topology-engine:${full_build_number:-latest}"
    command: ./entrypoint.sh
    links:
      - neo4j
      - kafka:kafka.pendev
      - topology-engine-rest
      - zookeeper:zookeeper.pendev
    environment:
      neo4jhost: 'neo4j'
      neo4juser: 'neo4j'
      neo4jpass: 'temppass'
      neo4jbolt: 'http://neo4j:7474/db/data/cypher'
      bootstrapserver: 'kafka.pendev:9092'
      topic: 'kilda-test'
      group: 'python-tpe-tl-consumer'
      OK_TESTS: "${OK_TESTS:-none}"
    depends_on:
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_healthy

  topology-engine-rest:
    container_name: topology-engine-rest
    build:
      context: services/topology-engine-rest/
      dockerfile: Dockerfile
    image: "kilda/topology-engine-rest:${full_build_number:-latest}"
    command: ./entrypoint.sh
    volumes:
      - app_server_data:/var/data
    ports:
      - "80:80"
    links:
      - neo4j
      - kafka:kafka.pendev
    environment:
      neo4jhost: 'neo4j'
      neo4juser: 'neo4j'
      neo4jpass: 'temppass'
      neo4jbolt: 'http://neo4j:7474/db/data/cypher'
      bootstrapserver: 'kafka.pendev:9092'
      topic: 'kilda-test'
      group: 'python-tpe-tl-consumer'
      OK_TESTS: "${OK_TESTS:-none}"
    depends_on:
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_healthy

  zookeeper:
    container_name: zookeeper
    hostname: zookeeper.pendev
    image: "kilda/zookeeper:${full_build_number:-latest}"
    command: /opt/zookeeper/bin/zkServer.sh start-foreground
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "jps | grep --silent QuorumPeer"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    container_name: kafka
    hostname: kafka.pendev
    image: "kilda/kafka:${full_build_number:-latest}"
    # run_and_configure is in services/kafka/kafka-conf
    # command: /opt/kafka/bin/run_and_configure.sh
    command: /opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties
    volumes:
      - kafka_data:/data/kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    links:
      - zookeeper:zookeeper.pendev
    ports:
      - "9092:9092"
    extra_hosts:
      - "kafka.pendev:127.0.0.1"
    healthcheck:
      test: ["CMD-SHELL", "jps | grep --silent Kafka"]
      interval: 30s
      timeout: 10s
      retries: 3

  wfm:
    container_name: wfm
    build:
      context: services/wfm
    image: "kilda/wfm:${full_build_number:-latest}"
    depends_on:
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      storm_nimbus:
        condition: service_healthy
      storm_supervisor:
        condition: service_healthy
    links:
      - kafka:kafka.pendev
      - storm_nimbus:nimbus.pendev
      - zookeeper:zookeeper.pendev

  hbase:
    container_name: hbase
    hostname: hbase.pendev
    image: "kilda/hbase:${full_build_number:-latest}"
    command: /opt/hbase/bin/start-hbase
    volumes:
      - hbase_data:/data/hbase
    depends_on:
      zookeeper:
        condition: service_healthy
    links:
      - zookeeper:zookeeper.pendev
    ports:
      - "60000:60000"
      - "60010:60010"
      - "60020:60020"
      - "60030:60030"
      - "8070:8070"
      - "8090:8090"
      - "9070:9070"
      - "9080:9080"
      - "9090:9090"
    healthcheck:
      test: ["CMD-SHELL", "jps | grep --silent HMaster"]
      interval: 30s
      timeout: 10s
      retries: 3

#  tools:
#    build:
#      context: services
#      dockerfile:  tools/Dockerfile
#    image: "kilda/tools:${full_build_number:-latest}"
#    command: sleep 10d
#    depends_on:
#      - zookeeper
#      - hbase
#      - storm_nimbus
#      - storm_supervisor
#    links:
#      - zookeeper:zookeeper.pendev
#      - hbase:hbase.pendev
#      - storm_nimbus:nimbus.pendev
#      - storm_supervisor:supervisor.pendev
#    ports:
#      - "22:8022"
#    container_name: "hadoop-tools"

  storm_nimbus:
    container_name: storm_nimbus
    hostname: nimbus.pendev
    image: "kilda/storm:${full_build_number:-latest}"
    command: /app/wait-for-it.sh -t 120 -h zookeeper.pendev -p 2181 -- /opt/storm/bin/storm nimbus
    depends_on:
      zookeeper:
        condition: service_healthy
      opentsdb:
        condition: service_started
    links:
      - neo4j:neo4j.pendev
      - zookeeper:zookeeper.pendev
      - opentsdb:opentsdb.pendev
    ports:
      - "6627:6627"
      - "3772:3772"
      - "3773:3773"
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "jps | grep --silent nimbus"]
      interval: 30s
      timeout: 10s
      retries: 3

  storm_ui:
    container_name: storm_ui
    image: "kilda/storm:${full_build_number:-latest}"
    command: /app/wait-for-it.sh -t 120 -h zookeeper.pendev -p 2181 -- /opt/storm/bin/storm ui
    depends_on:
      zookeeper:
        condition: service_healthy
      storm_nimbus:
        condition: service_healthy
      storm_supervisor:
        condition: service_healthy
    links:
      - zookeeper:zookeeper.pendev
      - storm_nimbus:nimbus.pendev
      - storm_supervisor:supervisor.pendev
    ports:
      - "8888:8080"
    healthcheck:
      test: ["CMD-SHELL", "jps | grep --silent core"]
      interval: 30s
      timeout: 10s
      retries: 3

  storm_supervisor:
    container_name: storm_supervisor
    hostname: storm_supervisor.pendev
    image: "kilda/storm:${full_build_number:-latest}"
    command: /app/wait-for-it.sh -t 120 -h zookeeper.pendev -p 2181 -- /opt/storm/bin/storm supervisor
    depends_on:
      zookeeper:
        condition: service_healthy
      storm_nimbus:
        condition: service_healthy
    links:
      - neo4j:neo4j.pendev
      - zookeeper:zookeeper.pendev
      - kafka:kafka.pendev
      - opentsdb:opentsdb.pendev
      - storm_nimbus:nimbus.pendev
    ports:
      - "6700:6700"
      - "6701:6701"
      - "6702:6702"
      - "6703:6703"
      - "6704:6704"
      - "6705:6705"
      - "6706:6706"
      - "6707:6707"
      - "6708:6708"
      - "6709:6709"
      - "6710:6710"
      - "6711:6711"
      - "6712:6712"
      - "6713:6713"
      - "6714:6714"
      - "8001:8000"
    healthcheck:
      test: ["CMD-SHELL", "jps | grep --silent Supervisor"]
      interval: 30s
      timeout: 10s
      retries: 3

  floodlight:
    build:
      context: services/src/floodlight-modules
    image: "kilda/floodlight:${full_build_number:-latest}"
    ports:
      - "6653:6653"
      - "8180:8080"
      - "6655:6655"
      - "6642:6642"
      - "8081:8080"
    links:
      - kafka:kafka.pendev
    depends_on:
      kafka:
        condition: service_healthy

  northbound:
    build:
      context: services/src/northbound/
    ports:
      - "8088:8080"
    links:
      - kafka:kafka.pendev
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./dist/devel-local:/env:ro

  opentsdb:
    container_name: opentsdb
    hostname: opentsdb.pendev
    image: "kilda/opentsdb:${full_build_number:-latest}"
    command: /app/wait-for-it.sh -t 120 -h hbase.pendev -p 9090 -- /app/start-opentsdb
    depends_on:
      zookeeper:
        condition: service_healthy
      hbase:
        condition: service_healthy
    links:
      - zookeeper:zookeeper.pendev
      - hbase:hbase.pendev
    ports:
      - "4242:4242"

volumes:
  zookeeper_data:
  kafka_data:
  app_server_data:
  hbase_data:
# mininet_data:
